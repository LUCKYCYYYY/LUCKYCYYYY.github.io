{
    "version": "https://jsonfeed.org/version/1",
    "title": "眨眼的小星玥 • All posts by \"计算机网络\" category",
    "description": "小星玥，要努力学习呀！",
    "home_page_url": "http://www.luckycyyyy.top",
    "items": [
        {
            "id": "http://www.luckycyyyy.top/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91--%E9%93%BE%E8%B7%AF%E5%B1%82/",
            "url": "http://www.luckycyyyy.top/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91--%E9%93%BE%E8%B7%AF%E5%B1%82/",
            "title": "链路层",
            "date_published": "2024-11-14T05:22:23.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMzYwOTk2NDAyL2NoYW5uZWwvc2VyaWVzZGV0YWlsP3NpZD0xNzIxODgy\">文章参考–湖科大教书匠</span></p>\n<h1 id=\"链路层概述\"><a class=\"markdownIt-Anchor\" href=\"#链路层概述\">#</a> 链路层概述</h1>\n<h2 id=\"链路层提供的服务\"><a class=\"markdownIt-Anchor\" href=\"#链路层提供的服务\">#</a> 链路层提供的服务</h2>\n<p><strong>成帧</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411141436390.png\" alt=\"\"></p>\n<ul>\n<li>将数据加上头部和尾部，封装成数据帧</li>\n<li>帧头部用 MAC 地址标识源和目的（不同于 IP 地址）</li>\n<li>MSS = MTU - IP 头部长度 - TCP 头部长度</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411141429164.png\" alt=\"\"></p>\n<p>透明传输中因为对传输数据没有任何限制，即允许数据中存在帧定界符，所以接收方可能把数据中的那段数据错认成帧定界符。</p>\n<p>解决方法：</p>\n<ol>\n<li>对帧界定符进行 “转义”，在其之前加上 ESC</li>\n<li>在数据中与转义字符相同的数据段中填充 0</li>\n</ol>\n<p>eg：<br>\n<img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411141435145.png\" alt=\"\"></p>\n<p><strong>链路接入</strong></p>\n<ul>\n<li>共享介质的信道访问</li>\n</ul>\n<p><strong>可靠交付</strong></p>\n<ul>\n<li>\n<p>很少用于误码率低的链路（光纤、双绞线链路）</p>\n</li>\n<li>\n<p>用于误码率高的链路（无线链路）</p>\n</li>\n</ul>\n<p><strong>差错检测和纠正</strong></p>\n<ul>\n<li>\n<p>信号衰减和电磁干扰噪声导致出错</p>\n</li>\n<li>\n<p>接收方检测到错误存在：</p>\n<ul>\n<li>给发送方发送信号要求重传或丢弃该数据帧</li>\n<li>接收方检测和纠正帧中错误，不用重传</li>\n</ul>\n</li>\n</ul>\n<p><strong>流量控制</strong></p>\n<ul>\n<li>在相邻的收发节点间限制流量</li>\n</ul>\n<p><strong>半双工和全双工</strong></p>\n<ul>\n<li>半双工时，链路两端的节点都能传输分组，但不能同时传输</li>\n</ul>\n<h2 id=\"链路层实现地点\"><a class=\"markdownIt-Anchor\" href=\"#链路层实现地点\">#</a> 链路层实现地点</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411141422284.png\" alt=\"\"></p>\n<h1 id=\"差错检测和纠正技术\"><a class=\"markdownIt-Anchor\" href=\"#差错检测和纠正技术\">#</a> 差错检测和纠正技术</h1>\n<h2 id=\"奇偶校验\"><a class=\"markdownIt-Anchor\" href=\"#奇偶校验\">#</a> 奇偶校验</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411141441883.png\" alt=\"\"></p>\n<h2 id=\"循环冗余校验\"><a class=\"markdownIt-Anchor\" href=\"#循环冗余校验\">#</a> 循环冗余校验</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411141517355.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411141517857.png\" alt=\"\"></p>\n<p>发送方：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411141516661.png\" alt=\"\"></p>\n<ol>\n<li>” 除法 “实质上是异或运算</li>\n<li>是否够除，是看位数是否足够</li>\n</ol>\n<p>接收方：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411141516573.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411141516644.png\" alt=\"\"></p>\n<h2 id=\"因特网检查和\"><a class=\"markdownIt-Anchor\" href=\"#因特网检查和\">#</a> 因特网检查和</h2>\n<p><strong>分组</strong>：首先，将数据（或数据包）分为若干个 16 位的字（即每个字为两个字节）。如果数据长度不是 16 位的倍数，最后的一个部分将补充零填充。</p>\n<p><strong>求和</strong>：将所有 16 位的字相加，如果出现溢出（即超过 16 位），将溢出的部分加到和的最低位。也就是说，要进行 “循环加法”。</p>\n<p><strong>取反</strong>：对最终的和值进行按位取反（将 0 变为 1，1 变为 0），得到检查和。这个和值就是<strong>校验和</strong>。</p>\n<p><strong>校验</strong>：接收方收到数据后，执行相同的操作，计算出一个校验和。若计算出的校验和为全 1，则认为数据无误；如果不为全 1，表示数据在传输过程中可能发生了错误。</p>\n<h1 id=\"多路访问链路和协议\"><a class=\"markdownIt-Anchor\" href=\"#多路访问链路和协议\">#</a> 多路访问链路和协议</h1>\n<p><strong>广播链路的特点</strong></p>\n<blockquote>\n<p>广播链路是指在一个通信系统中，信号从单个源设备发送出去，所有处于链路上的接收设备都能接收到该信号。广播通常用于无线通信或广播电视中。</p>\n</blockquote>\n<ul>\n<li>\n<p>单个共享广播信道</p>\n</li>\n<li>\n<p>两个或多个节点同时传输：相互干扰</p>\n</li>\n<li>\n<p>碰撞：一个节点同时收到两个或多个信号</p>\n</li>\n</ul>\n<p><strong>多路访问协议</strong></p>\n<blockquote>\n<p>多路访问是指多个设备在同一时间使用共享的通信介质进行通信。为了避免冲突，多路访问需要一些协议来协调不同设备的传输。常见的多路访问方法包括时分多路访问（TDMA）、频分多路访问（FDMA）、码分多路访问（CDMA）等。</p>\n</blockquote>\n<ul>\n<li>\n<p>分布式算法决定节点如何共享信道，如节点何时可以传输数据</p>\n</li>\n<li>\n<p>** 特别注意：** 有关共享信道的通信（协商）需使用信道本身</p>\n</li>\n<li>\n<p>没有额外的信道来进行协调</p>\n</li>\n</ul>\n<p><strong>多址访问协议分类</strong></p>\n<blockquote>\n<p>多址访问实际上是多路访问的一个子集，特指如何在多个设备之间有效地分配通信资源。在多址访问中，每个设备有一个独立的标识（地址），这样设备之间可以根据地址来区分不同的通信流。</p>\n</blockquote>\n<ul>\n<li>\n<p>信道划分协议</p>\n<ul>\n<li>将信道划分成小的 “片”（时隙、频率、编码）</li>\n<li>将 “片” 分配给节点使用</li>\n</ul>\n</li>\n<li>\n<p>随机接入（访问）协议</p>\n<ul>\n<li>\n<p>信道没有被分割，允许碰撞</p>\n</li>\n<li>\n<p>碰撞恢复</p>\n</li>\n</ul>\n</li>\n<li>\n<p>轮流协议</p>\n<ul>\n<li>节点轮流传送，但数据量大的节点轮流更长时间</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"信道的划分\"><a class=\"markdownIt-Anchor\" href=\"#信道的划分\">#</a> 信道的划分</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411150913515.png\" alt=\"\"></p>\n<h3 id=\"静态信道划分\"><a class=\"markdownIt-Anchor\" href=\"#静态信道划分\">#</a> 静态信道划分</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411150806445.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411150806602.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411150807071.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411150812909.png\" alt=\"\"></p>\n<h3 id=\"动态信道划分\"><a class=\"markdownIt-Anchor\" href=\"#动态信道划分\">#</a> 动态信道划分</h3>\n<h4 id=\"aloha\"><a class=\"markdownIt-Anchor\" href=\"#aloha\">#</a> ALOHA</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411150918169.png\" alt=\"\"></p>\n<p><strong>时隙 ALOHA</strong>：</p>\n<ul>\n<li>\n<p>所有的帧大小相同</p>\n</li>\n<li>\n<p>时间被划分为相同大小的时隙，一个时隙等于传输一帧的时间</p>\n</li>\n<li>\n<p>节点只在时隙的开始传输帧</p>\n</li>\n<li>\n<p>节点被同步</p>\n</li>\n<li>\n<p>若有两个或多个节点在一个时隙内传送，则所有节点都能在该时隙内检测到冲突</p>\n</li>\n<li>\n<p>当节点有新的帧发送，它等到下一个时隙发送</p>\n</li>\n<li>\n<p>若没有碰撞，节点能在下一时隙传送完新帧</p>\n</li>\n<li>\n<p>若有碰撞，节点以概率 p 在后续的每一个时隙重传该帧，即在发生冲突后会随机间隔 n 个时隙进行重发</p>\n</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>\n<p>单个活动节点能以全速 R 连续传输</p>\n</li>\n<li>\n<p>高度分散：时隙只在节点同步</p>\n</li>\n<li>\n<p>简单</p>\n</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>\n<p>碰撞，浪费时隙</p>\n</li>\n<li>\n<p>时隙空闲</p>\n</li>\n<li>\n<p>节点需要在分组传送时间以内检测到碰撞</p>\n</li>\n<li>\n<p>时钟同步</p>\n</li>\n</ul>\n<p><strong>效率：</strong></p>\n<p>时隙 ALOHA：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411150926401.png\" alt=\"\"></p>\n<p>纯 ALOHA：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411150927423.png\" alt=\"\"></p>\n<h4 id=\"csmacd\"><a class=\"markdownIt-Anchor\" href=\"#csmacd\">#</a> CSMA/CD</h4>\n<h5 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h5>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411150933829.png\" alt=\"\"></p>\n<p><strong>分类：</strong></p>\n<p><strong>非坚持 CSMA</strong>：一旦监听到信道忙（即发现有其他站在发送数据），就不再坚持听下去，而是根据协议的算法<strong>延迟一个随机的时间后</strong>重新再监听。若进行载波监听时发现信道空闲，则将准备好的帧发送出去。</p>\n<p><strong>时隙非坚持 CSMA：<strong>采用划分时隙的随机接入 CSMA 协议，协议规定只能</strong>在每个时隙开始时</strong>才能发送帧。</p>\n<p><strong>1 坚持 CSMA：<strong>当一个站点要传送数据时，首先侦听信道，看是否有其他站点正在传送。如果信道正忙，它就</strong>持续等待直到它侦听到信道空闲</strong>时，便将数据送出。若发生<strong>冲突</strong>，站点就<strong>等待一个随机长的时间</strong>，然后重新开始。</p>\n<p><strong>P 坚持 CSMA：<strong>当一个站点要传送数据时，首先侦听信道，看是否有其他站点正在传送。如果信道正忙，它就</strong>持续等待直到它侦听到信道空闲</strong>时，以<strong>概率 P 发送数据</strong>，而<strong>以概率（1－P）延迟一段时间 τ</strong>（网络中最远的端到端的传播时延），重新监听信道。若发生冲突，站点就等待一个随机长的时间，然后重新开始。</p>\n<p><strong>CSMA 比较：</strong></p>\n<ul>\n<li>\n<p>非坚持：不能充分利用信道刚刚转入空闲期的这段时间。</p>\n</li>\n<li>\n<p>1 坚持：容易在上述这段时间产生冲突。</p>\n</li>\n<li>\n<p>P 坚持：可以在一定程度上克服这些缺点，但却很难选择一个能用于各种通信量强度的 P 值。</p>\n</li>\n</ul>\n<p><strong>在实际网络中常选择 1 坚持</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411151015046.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411150940320.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411150942115.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411150943083.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411150945231.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411150947490.png\" alt=\"\"></p>\n<h5 id=\"习题\"><a class=\"markdownIt-Anchor\" href=\"#习题\">#</a> 习题</h5>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411151000035.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411151003140.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411151003086.png\" alt=\"\"></p>\n<h5 id=\"发送流程\"><a class=\"markdownIt-Anchor\" href=\"#发送流程\">#</a> 发送流程</h5>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411150948941.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411150948573.png\" alt=\"\"></p>\n<h4 id=\"轮流协议\"><a class=\"markdownIt-Anchor\" href=\"#轮流协议\">#</a> 轮流协议</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411151019498.png\" alt=\"\"></p>\n<p><strong>三者比较</strong></p>\n<p><strong>信道划分协议</strong></p>\n<ul>\n<li>\n<p>在重负荷时，共享信道有效、公平</p>\n</li>\n<li>\n<p>在轻负荷时效率低：信道访问延时，即使只有一个活动节点，也只能分配到 1/N 的带宽</p>\n</li>\n</ul>\n<p><strong>随机访问协议</strong></p>\n<ul>\n<li>\n<p>轻负荷时效率高：只有一个节点时，能充分利用信道</p>\n</li>\n<li>\n<p>在重负荷下：碰撞的开销</p>\n</li>\n</ul>\n<p><strong>轮流协议</strong></p>\n<ul>\n<li>在两个方面寻求最佳的解决方案！</li>\n</ul>\n<h1 id=\"交换局域网\"><a class=\"markdownIt-Anchor\" href=\"#交换局域网\">#</a> 交换局域网</h1>\n<h2 id=\"链路层寻址和arp\"><a class=\"markdownIt-Anchor\" href=\"#链路层寻址和arp\">#</a> 链路层寻址和 ARP</h2>\n<p><strong>Q</strong>：既然有 IP 地址，为何要 MAC 地址</p>\n<p><strong>A</strong>：局域网设备不能够识别 IP 地址（工作在链路层），只能通过 MAC 地址寻找主机</p>\n<p><strong>Q</strong>：进程产生的套接字是端口号 + IP 地址，在局域网中如何找到目的主机</p>\n<p><strong>A</strong>：通过 IP 地址获取 MAC 地址</p>\n<p><strong>Q</strong>：如何在已知 IP 地址的情况下，获得 MAC 地址</p>\n<p><strong>A</strong>：地址解析协议（ARP）</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411151045976.png\" alt=\"\"></p>\n<h3 id=\"mac地址lan地址物理地址\"><a class=\"markdownIt-Anchor\" href=\"#mac地址lan地址物理地址\">#</a> MAC 地址（LAN 地址，物理地址）</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411151047259.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411151047902.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411151047332.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411151045825.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411151047437.png\" alt=\"\"></p>\n<blockquote>\n<p>物理地址指的是 MAC 地址，在数据链路层上</p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411151046083.png\" alt=\"\"></p>\n<h3 id=\"arp\"><a class=\"markdownIt-Anchor\" href=\"#arp\">#</a> ARP</h3>\n<blockquote>\n<p>根据目标的 IP 地址获取其 MAC 地址</p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411172037484.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411151057305.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411151057575.png\" alt=\"\"></p>\n<blockquote>\n<p>ARP 协议只能在一段链路或一个网络上使用，而不能跨网络使用</p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411151058910.png\" alt=\"\"></p>\n<h2 id=\"以太网\"><a class=\"markdownIt-Anchor\" href=\"#以太网\">#</a> 以太网</h2>\n<h3 id=\"以太网类型\"><a class=\"markdownIt-Anchor\" href=\"#以太网类型\">#</a> 以太网类型</h3>\n<ul>\n<li>总线式以太网</li>\n<li>交换式以太网</li>\n</ul>\n<h3 id=\"以太网的帧结构\"><a class=\"markdownIt-Anchor\" href=\"#以太网的帧结构\">#</a> 以太网的帧结构</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161124022.png\" alt=\"\"></p>\n<p><strong>数据字段</strong>：（46 字节～1500 字节）</p>\n<p><strong>前同步码</strong>：</p>\n<ul>\n<li>\n<p>总共 8 字节，前 7 字节的格式为 10101010 ，最后一个字节格式为 10101011</p>\n</li>\n<li>\n<p>用于同步发送方与接收方时钟</p>\n</li>\n</ul>\n<p><strong>地址</strong>：6 字节</p>\n<ul>\n<li>若适配器收到以太网帧，目的地址为自己的 MAC 地址或广播地址（如 ARP 包），就将帧中的数据传给网络层。</li>\n<li>否则，适配器丢弃该帧</li>\n</ul>\n<p><strong>类型</strong>：上层协议类型 （大多为 IP 协议，也支持其它协议如 Novell IPX 和 AppleTalk）</p>\n<p><strong>CRC</strong>：由接收方检查，若检测到错误，就将该帧丢弃</p>\n<h3 id=\"以太网提供的服务\"><a class=\"markdownIt-Anchor\" href=\"#以太网提供的服务\">#</a> 以太网提供的服务</h3>\n<ul>\n<li>\n<p><strong>无连接服务</strong>：在发送适配器和接收适配器之间不需要握手</p>\n</li>\n<li>\n<p><strong>不可靠服务</strong>：接收适配器不发送确认帧或否认帧给发送方</p>\n<ul>\n<li>交给网络层的数据报可能存在间隙</li>\n<li>若应用使用 TCP，间隙会被填充</li>\n<li>否则，应用就会看见间隙</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"以太网使用的csmacd\"><a class=\"markdownIt-Anchor\" href=\"#以太网使用的csmacd\">#</a> 以太网使用的 CSMA/CD</h3>\n<p><strong>特点</strong></p>\n<ul>\n<li>\n<p>没有时隙</p>\n</li>\n<li>\n<p>当适配器侦听到其它适配器在传输，则不传输帧，即<strong>载波侦听</strong></p>\n</li>\n<li>\n<p>正在传输的适配器若检测到其它适配器也在传输，则它中止自己的传输，即<strong>碰撞检测</strong></p>\n</li>\n<li>\n<p>在重新传输之前，适配器要等待一段随机时间，即<strong>随机访问</strong></p>\n</li>\n</ul>\n<p><strong>算法</strong></p>\n<ol>\n<li>适配器收到来自网络层的数据报，创建帧</li>\n<li>若适配器检测到信道空闲，则开始传输帧；若检测到信道忙，就开始等待，直到信道空闲再开始传输该帧</li>\n<li>若适配器传输了整个帧而没有检测到其它适配器的传输，则该适配器完成该帧的传输</li>\n<li>若适配器在传输时检测到其它适配器也在传输，则停止传输，发送拥塞信号</li>\n<li>中止传输后，适配器进入指数回退阶段，在经历第 m 次碰撞后，适配器随机从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mtext>，</mtext><mn>1</mn><mtext>，</mtext><mn>2</mn><mtext>，</mtext><mo>…</mo><mtext>，</mtext><msup><mn>2</mn><mi>m</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">{0，1，2，…，2^m-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\">2</span><span class=\"mord cjk_fallback\">，</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span></span></span> 中选择 K 值。适配器在等待 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mtext>·</mtext><mn>512</mn></mrow><annotation encoding=\"application/x-tex\">K·512</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord\">·</span><span class=\"mord\">5</span><span class=\"mord\">1</span><span class=\"mord\">2</span></span></span></span> 比特时间后，返回第 2 步</li>\n</ol>\n<p><strong>重要特性</strong></p>\n<ul>\n<li>\n<p>使用 CSMA/CD 协议的以太网不能进行<strong>全双工通信</strong>而只能进行双向交替通信（<strong>半双工通信</strong>）。</p>\n</li>\n<li>\n<p>每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。</p>\n</li>\n<li>\n<p>这种发送的不确定性使整个以太网的平均通信量远小于以太网的最高数据率。</p>\n</li>\n</ul>\n<h3 id=\"传统以太网的物理层\"><a class=\"markdownIt-Anchor\" href=\"#传统以太网的物理层\">#</a> 传统以太网的物理层</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161429974.png\" alt=\"\"></p>\n<p><strong>10BASE5</strong></p>\n<ul>\n<li>\n<p>10 表示传输速率为 10Mbps</p>\n</li>\n<li>\n<p>BASE 表示基带传输：将信源的数据经过变换变为数字基带信号直接传输，信号不经过频谱搬移。</p>\n<ul>\n<li>基带数字信号在传输过程中，随着传输距离加大，信号衰减及噪声干扰会使得数字信号波形产生<strong>失真</strong>。</li>\n<li>为消除失真，每隔一定传输距离加设一个<strong>中继器</strong>。</li>\n<li><strong>中继器</strong>工作在<strong>物理层</strong>，把一端电缆的信号放大后传到另一端的电缆中。</li>\n</ul>\n</li>\n<li>\n<p>5 表示最远传输距离为 500m</p>\n</li>\n</ul>\n<h3 id=\"吉比特以太网千兆以太网\"><a class=\"markdownIt-Anchor\" href=\"#吉比特以太网千兆以太网\">#</a> 吉比特以太网（千兆以太网）</h3>\n<ul>\n<li>\n<p>使用标准以太网帧格式</p>\n</li>\n<li>\n<p>允许点对点链路和共享的广播信道</p>\n</li>\n<li>\n<p>共享信道时，使用 CSMA/CD; 为了得到可接受的效率，节点之间的距离要短</p>\n</li>\n<li>\n<p>对于点到点链路，可以以 1Gbps 的速率全双工工作</p>\n</li>\n<li>\n<p>2006 年达到 10 Gbps</p>\n</li>\n</ul>\n<h3 id=\"信号编码\"><a class=\"markdownIt-Anchor\" href=\"#信号编码\">#</a> 信号编码</h3>\n<p><strong>曼彻斯特编码</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161530621.png\" alt=\"\"></p>\n<p><strong>编码规则</strong></p>\n<ol>\n<li>每个比特周期分为两个部分（前半周期和后半周期）。</li>\n<li>逻辑 <code>0</code>\n<ul>\n<li>前半周期为高电平，后半周期为低电平（高到低跳变）。</li>\n</ul>\n</li>\n<li>逻辑 <code>1</code>\n<ul>\n<li>前半周期为低电平，后半周期为高电平（低到高跳变）。</li>\n</ul>\n</li>\n</ol>\n<p>也可以简单记为：</p>\n<ul>\n<li>电平<strong>高到低</strong>表示 <code>0</code> 。</li>\n<li>电平<strong>低到高</strong>表示 <code>1</code> 。</li>\n</ul>\n<p><strong>特性</strong></p>\n<ol>\n<li>同步性\n<ul>\n<li>每个比特周期都有一个中间跳变（高到低或低到高），提供了时钟同步信号。</li>\n</ul>\n</li>\n<li>直流平衡\n<ul>\n<li>平均电平为零，不存在直流分量（频谱更适合传输介质）。</li>\n</ul>\n</li>\n<li>抗干扰性\n<ul>\n<li>即使传输中发生一些干扰，由于信号变化的频率较高，接收端更容易检测和恢复信号。</li>\n</ul>\n</li>\n</ol>\n<p><strong>差分曼彻斯特编码</strong></p>\n<p>基于信号的物理层编码技术，常用于数字通信中，用于将比特数据转换成电信号传输。它结合了差分编码和曼彻斯特编码的优点，具有良好的抗干扰能力和同步特性。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161538118.png\" alt=\"\"></p>\n<ol>\n<li>\n<p><strong>编码规则</strong>：</p>\n<ul>\n<li><strong>逻辑 “0”</strong>：在比特开始时进行<strong>翻转</strong>（电平从高到低，或低到高）。</li>\n<li><strong>逻辑 “1”</strong>：在比特开始时<strong>不翻转</strong>（电平保持上一位结束时的状态）。</li>\n<li><strong>同步跳变</strong>：每个比特周期中间（即位间隔中点）必须<strong>翻转</strong>，确保同步信号的存在。</li>\n</ul>\n<p><strong>NRZ 信号</strong>：</p>\n<ul>\n<li>作为对比，NRZ 信号直接用高低电平表示逻辑 “1” 和逻辑 “0”。</li>\n<li>无中点翻转，容易因长时间电平不变而丢失同步。</li>\n</ul>\n<p><strong>差分曼彻斯特信号</strong>：</p>\n<ul>\n<li>每位的中点始终有一次<strong>固定翻转</strong>（用于时钟同步）。</li>\n<li>根据开始时是否翻转来区分逻辑 “0” 和 “1”。</li>\n<li>不同于普通曼彻斯特编码，差分曼彻斯特编码对信号极性反转不敏感。</li>\n</ul>\n</li>\n</ol>\n<p><strong>信号解读</strong></p>\n<p>以图中的比特流  <code>0 1 0 0 1 1 0 1 0</code>  为例，逐位分析：</p>\n<p>在最开头的高横线表示之前的状态</p>\n<ul>\n<li>第一位  <code>0</code>\n<ul>\n<li>开始时翻转（横线高到低）。</li>\n<li>中点时翻转（横线低到高）。</li>\n</ul>\n</li>\n<li>第二位 <code>1</code>\n<ul>\n<li>开始时不翻转，保持上一位结束时的状态（横线高）。</li>\n<li>中点时翻转（横线高到低）。</li>\n</ul>\n</li>\n<li>第三位  <code>0</code>\n<ul>\n<li>开始时翻转（横线低到高）。</li>\n<li>中点时翻转（横线高到低）。</li>\n</ul>\n</li>\n<li>后续位依次按规则进行。</li>\n</ul>\n<h2 id=\"链路交换机\"><a class=\"markdownIt-Anchor\" href=\"#链路交换机\">#</a> 链路交换机</h2>\n<h3 id=\"集线器\"><a class=\"markdownIt-Anchor\" href=\"#集线器\">#</a> 集线器</h3>\n<p>集线器本质上是<strong>物理层</strong>的中继器：</p>\n<ul>\n<li>\n<p>从一个接口收到的比特流会传给其它所有接口</p>\n</li>\n<li>\n<p>同样速率</p>\n</li>\n<li>\n<p>没有帧缓存</p>\n</li>\n<li>\n<p>集线器没有 CSMA/CD ：由适配器检测碰撞</p>\n</li>\n<li>\n<p>提供网络管理功能（可网管、智能、网络分段）</p>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161547157.png\" alt=\"\"></p>\n<h3 id=\"交换机\"><a class=\"markdownIt-Anchor\" href=\"#交换机\">#</a> 交换机</h3>\n<ul>\n<li>\n<p>数据链路层 + 物理层</p>\n</li>\n<li>\n<p>主机<strong>直接连接</strong>到交换机</p>\n</li>\n<li>\n<p>交换机<strong>缓存</strong>数据包</p>\n</li>\n<li>\n<p>每一条链路都采用了以太网协议，但之间<strong>没有冲突，全双工通信</strong></p>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161612362.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161553650.png\" alt=\"\"></p>\n<p><strong>自学习转发</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161612013.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161612196.png\" alt=\"\"></p>\n<p>每条记录都有自己的有效时间，到期会自动删除；因为 MAC 地址和结构的关系不是永久的。</p>\n<p><strong>习题</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161614140.png\" alt=\"\"></p>\n<h3 id=\"网桥\"><a class=\"markdownIt-Anchor\" href=\"#网桥\">#</a> 网桥</h3>\n<p>网桥实质上就是一种存储转发设备，用来实现 MAC 层的 LAN 互连</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161620742.png\" alt=\"\"></p>\n<p><strong>网桥的工作原理</strong></p>\n<ul>\n<li>\n<p>不断监听各端口是否有信号</p>\n</li>\n<li>\n<p>收到无差错的帧则缓存，反之将差错帧丢弃</p>\n</li>\n<li>\n<p>若所收帧的目的 MAC 地址属另一网段，则通过站表决定向何端口转发</p>\n</li>\n<li>\n<p>网桥不转发同一 “网段” 内通信的帧</p>\n</li>\n<li>\n<p>目的主机和源主机不连接在网桥的同一接口上才会转发</p>\n</li>\n<li>\n<p>网桥不修改所转发的帧的源地址</p>\n</li>\n</ul>\n<p><strong>网桥的优势</strong></p>\n<ul>\n<li>\n<p>过滤通信量</p>\n</li>\n<li>\n<p>扩大了局域网的物理范围</p>\n</li>\n<li>\n<p>提高了可靠性</p>\n</li>\n<li>\n<p>可互连不同物理层、不同 MAC 子层和不同速率的局域网</p>\n</li>\n</ul>\n<p><strong>网桥的缺点</strong></p>\n<ul>\n<li>\n<p>由于要接收和转发，增加了时延</p>\n</li>\n<li>\n<p>MAC 子层没有流量控制功能，网络负荷重时，网桥缓存空间可能发生溢出，产生帧丢失现象</p>\n</li>\n<li>\n<p>不同 MAC 子层的网段桥接时，在转发帧之前要修改帧的某些字段，这也需要耗费时间</p>\n</li>\n<li>\n<p>出现<strong>广播风暴</strong>。网桥只适合用户少于几百个和通信量不太大的局域网，否则有时会因传播过多广播信息而产生网络拥塞</p>\n</li>\n</ul>\n<p><strong>网桥和集线器的区别</strong></p>\n<ul>\n<li>\n<p>集线器只是将网络的覆盖距离简单的延长，而且距离有限，具体实现在<strong>物理层</strong>；网桥不仅具有将 LAN 的覆盖距离延长的作用，而且理论上可做到无限延长（?），具体实现在<strong> MAC 层</strong>。</p>\n<ul>\n<li><strong>MAC 层</strong>（媒体访问控制层）是计算机网络中的一个子层，属于数据链路层。MAC 层的主要职责是控制设备如何访问物理介质并实现数据帧的可靠传输。它是网络中通信设备之间协同工作、避免冲突的重要机制。</li>\n</ul>\n</li>\n<li>\n<p>集线器仅具有简单的信号整形和放大的功能；网桥则属于一种智能互连设备，它主要提供<strong>信号的存储 / 转发、数据过滤、路由选择</strong>等能力。</p>\n</li>\n<li>\n<p>集线器仅是一种<strong>硬设备</strong>，而网桥既包括<strong>硬件又包括软件</strong>。</p>\n</li>\n<li>\n<p>集线器仅只能互连<strong>同类 LAN</strong>，而网桥可支持<strong>不同类型的 LAN</strong> 互连。</p>\n</li>\n</ul>\n<p><strong>透明网桥</strong></p>\n<p>这里所谓 “透明” 是指局域网上的每个站并不知道所发送的帧将经过哪几个网桥，即网桥对各站来说是看不见的</p>\n<p><strong>存在问题一一兜圈子</strong></p>\n<p>假设网络中存在多个互联网桥 A、B、C，形成了一个环路。当某设备发送广播帧时：</p>\n<ol>\n<li>广播帧从网桥 A 被转发到网桥 B，然后又被转发到网桥 C，再返回到网桥 A。</li>\n<li>每个网桥不断将广播帧转发到其他网桥，帧在环路中不断循环，形成广播风暴。</li>\n<li>在此过程中，各网桥不断更新 MAC 地址表，但无法正确确定设备的位置</li>\n</ol>\n<p><strong>解决方案 —— 支撑树算法</strong></p>\n<ul>\n<li>\n<p>互连在一起的网桥彼此通信后，就能找出原来的网络拓扑的一个子集，在这个子集里整个连通的网络中<strong>不存在回路</strong>。一旦支撑树确定了网桥就会将某些端口断开，以确保从原来的拓扑得出一个支撑树</p>\n</li>\n<li>\n<p>支撑树算法选择<strong>一个网桥为树的根</strong>，然后以最短路径为依据，找到树上的每一个结点</p>\n</li>\n<li>\n<p>为了让支撑树能反映网络拓扑的变化，每隔几秒钟每个网桥要广播其标识号，和它所知道的所有其他网桥</p>\n</li>\n</ul>\n<p><strong>缺点</strong>：互连局域网数目非常大时，支撑树算法可能花很多时间。</p>\n<p><strong>以太网交换机 —— 多端口网桥</strong></p>\n<ul>\n<li>\n<p>链路层设备</p>\n</li>\n<li>\n<p>存储和转发以太网帧</p>\n</li>\n<li>\n<p>检查帧头部，根据目的 MAC 地址转发帧</p>\n</li>\n<li>\n<p>当帧转发到 LAN 网段，用 CSMA/CD 访问 LAN 网段</p>\n</li>\n<li>\n<p>透明主机不知道交换机的存在</p>\n</li>\n<li>\n<p>即插即用，自学习，交换机不需配置</p>\n</li>\n<li>\n<p>直通交换：帧从入端口转发到出端口不需收集整个帧</p>\n</li>\n<li>\n<p>能少量减少延迟</p>\n</li>\n<li>\n<p>共享 / 专用的、10/100/1000Mbps 接口的结合</p>\n</li>\n</ul>\n<h3 id=\"对比\"><a class=\"markdownIt-Anchor\" href=\"#对比\">#</a> 对比</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161638793.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161558608.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161639568.png\" alt=\"\"></p>\n<h2 id=\"虚拟局域网\"><a class=\"markdownIt-Anchor\" href=\"#虚拟局域网\">#</a> 虚拟局域网</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161657489.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161657254.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161658542.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161658986.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161658713.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161658779.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161658977.png\" alt=\"\"></p>\n<img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161658761.png\" style=\"zoom: 50%;\" />\n<p><strong>习题</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411161659018.png\" alt=\"\"></p>\n",
            "tags": [
                "计网"
            ]
        },
        {
            "id": "http://www.luckycyyyy.top/2024/11/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91--%E7%BD%91%E7%BB%9C%E5%B1%82/",
            "url": "http://www.luckycyyyy.top/2024/11/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91--%E7%BD%91%E7%BB%9C%E5%B1%82/",
            "title": "网络层",
            "date_published": "2024-11-13T11:46:24.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMzYwOTk2NDAyL2NoYW5uZWwvc2VyaWVzZGV0YWlsP3NpZD0xNzIxODgy\">文章参考：湖科大教书匠</span></p>\n<h1 id=\"网络层概述\"><a class=\"markdownIt-Anchor\" href=\"#网络层概述\">#</a> 网络层概述</h1>\n<h2 id=\"主要功能\"><a class=\"markdownIt-Anchor\" href=\"#主要功能\">#</a> 主要功能</h2>\n<ul>\n<li>\n<p>在全局范畴为主机之间的通信进行<strong>选路</strong>，选路的结果反映为分组交换机（设备）上的<strong>转发表</strong> <strong>(控制层面）</strong></p>\n</li>\n<li>\n<p>分组交换机（设备）上的网络层根据<strong>转发表</strong>以及<strong>分组头部信息</strong>，将分组向适当链路进行<strong>转发（数据层面）</strong></p>\n</li>\n<li>\n<p>对于面向连接的网络层服务，提供<strong>连接建立</strong>的功能</p>\n</li>\n</ul>\n<h2 id=\"分组交换机分类\"><a class=\"markdownIt-Anchor\" href=\"#分组交换机分类\">#</a> 分组交换机分类</h2>\n<p>交换机：</p>\n<ul>\n<li>连接不同 pc 端，连接到同一个局域网中</li>\n</ul>\n<p>路由器：</p>\n<ul>\n<li>连接不同网段</li>\n<li>转换网络地址，私网和公网的转换</li>\n</ul>\n<p>根据<strong>链路层首部信息</strong>进行转发的 ——<strong> 链路层节点交换机</strong></p>\n<p>根据<strong>网络层首部信息</strong>进行转发的 ——<strong> 路由器</strong></p>\n<h1 id=\"虚电路和数据报网络\"><a class=\"markdownIt-Anchor\" href=\"#虚电路和数据报网络\">#</a> 虚电路和数据报网络</h1>\n<p>面向连接的服务 ——<strong> 虚电路</strong>，需事先握手</p>\n<p>面向无连接的服务 ——<strong> 数据报</strong>，无需握手</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132002702.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132002216.png\" alt=\"\"></p>\n<h1 id=\"路由器工作原理\"><a class=\"markdownIt-Anchor\" href=\"#路由器工作原理\">#</a> 路由器工作原理</h1>\n<p>最长前缀匹配：查找给定目标地址的转发表项时，请使用与目标地址匹配的最长地址前缀</p>\n<h2 id=\"交换结构\"><a class=\"markdownIt-Anchor\" href=\"#交换结构\">#</a> 交换结构</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132006397.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132006004.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132007513.png\" alt=\"\"></p>\n<h2 id=\"路由器的拥塞问题\"><a class=\"markdownIt-Anchor\" href=\"#路由器的拥塞问题\">#</a> 路由器的拥塞问题</h2>\n<h3 id=\"缓冲区大小\"><a class=\"markdownIt-Anchor\" href=\"#缓冲区大小\">#</a> 缓冲区大小</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132023542.png\" alt=\"\"></p>\n<h3 id=\"分组调度策略\"><a class=\"markdownIt-Anchor\" href=\"#分组调度策略\">#</a> 分组调度策略</h3>\n<p>尾部丢弃：丢弃到达的数据包</p>\n<p>优先级：按优先级丢弃 / 删除</p>\n<p>随机：随机丢弃 / 移除</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132023291.png\" alt=\"\"></p>\n<h1 id=\"ip数据报的分片和重组\"><a class=\"markdownIt-Anchor\" href=\"#ip数据报的分片和重组\">#</a> ip 数据报的分片和重组</h1>\n<p>网络链路具有 <strong>MTU</strong> (最大传输单位) 属性 —— 是由链路层最大帧的限制决定的</p>\n<ul>\n<li>不同类型的链路有不同的<strong> MTU</strong> 值</li>\n</ul>\n<p>大的<strong> IP</strong> 数据报在网络中会被分成小的分片</p>\n<ul>\n<li>\n<p>一个数据报变成了几个数据报</p>\n</li>\n<li>\n<p>重组只在目的主机进行</p>\n</li>\n<li>\n<p>数据报头部的<strong>标识</strong>、<strong>标志</strong>以及片<strong>偏移字段</strong>用于目的主机对接收的分片进行重组</p>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132023505.png\" alt=\"\"></p>\n<ul>\n<li>每个小的分片都需要包含头部信息</li>\n<li>标志：1 为未结束，0 为结束（分片）</li>\n<li>片偏移量：每个分片在整个报文中的位置，偏移以 8 字节为单位，所以需要除以 8</li>\n</ul>\n<h1 id=\"ipv4地址概述\"><a class=\"markdownIt-Anchor\" href=\"#ipv4地址概述\">#</a> ipv4 地址概述</h1>\n<h2 id=\"分类编址\"><a class=\"markdownIt-Anchor\" href=\"#分类编址\">#</a> 分类编址</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132035454.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132029638.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132031570.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132034998.png\" alt=\"\"></p>\n<p>习题：</p>\n<p 注意解析3=\"\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"></span></span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132037574.png\" alt=\"\"></p>\n<p 0.0.0.0只能作为源地址=\"\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"></span></span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132041724.png\" alt=\"\"></p>\n<h2 id=\"划分子网\"><a class=\"markdownIt-Anchor\" href=\"#划分子网\">#</a> 划分子网</h2>\n<p>子网划分的方法：从主机号中借用一部分位数作为子网号</p>\n<p>子网掩码：通过在网络号的子网号相应的位置全置 1，主机号相应的位置全置 0，即可得到子网掩码</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132045035.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132047630.png\" alt=\"\"></p>\n<h3 id=\"cidr\"><a class=\"markdownIt-Anchor\" href=\"#cidr\">#</a> CIDR</h3>\n<p>构造超网</p>\n<p><strong>CIDR 编址格式</strong></p>\n<ul>\n<li &lt;网络前缀,=\"\" &lt;主机号=\"\">\n<p>IP 地址 ::=</p>\n</li>\n<li>\n<p>斜线记法：192.168.0.1/24</p>\n</li>\n<li>\n<p>简写记法：10.0.0.0/10 10/10</p>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132051121.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132056925.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132057231.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132059897.png\" alt=\"\"></p>\n<h1 id=\"ip数据报的发送和转发过程\"><a class=\"markdownIt-Anchor\" href=\"#ip数据报的发送和转发过程\">#</a> ip 数据报的发送和转发过程</h1>\n<p><strong>广播地址</strong>路由器<strong>不转发</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132124697.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132125993.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132126920.png\" alt=\"\"></p>\n<h2 id=\"cidr路由表\"><a class=\"markdownIt-Anchor\" href=\"#cidr路由表\">#</a> CIDR 路由表</h2>\n<p>使用 CIDR 时，路由表中的每个项目由 “网络前缀” 和 “下一跳地址” 组成。在查找路由表时可能会得到不止一个匹配结果。</p>\n<p>应当从匹配结果中选择具有最长网络前缀的路由：<strong>最长前缀匹配</strong>。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132130033.png\" alt=\"\"></p>\n<h1 id=\"获得ip地址\"><a class=\"markdownIt-Anchor\" href=\"#获得ip地址\">#</a> 获得 ip 地址</h1>\n<p>手工配置</p>\n<p>DHCP: 动态主机配置协议：从服务器上动态获取 IP 地址</p>\n<ul>\n<li>工作在应用层</li>\n<li>使用 UDP 协议工作</li>\n<li>DHCP 有 3 个端口</li>\n<li>67 和 68 为正常的 DHCP 服务端口，分别作为 DHCP Server 和 DHCP Client 的服务端口</li>\n<li>546 号端口用于 DHCPv6 Client，而不用于 DHCPv4，是为 DHCP failover 服务，这是需要特别开启的服务，DHCP failover 是用来做 “双机热备” 的</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411132135450.png\" alt=\"\"></p>\n<h1 id=\"icmp协议\"><a class=\"markdownIt-Anchor\" href=\"#icmp协议\">#</a> ICMP 协议</h1>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411140757622.png\" alt=\"\"></p>\n<h1 id=\"nat\"><a class=\"markdownIt-Anchor\" href=\"#nat\">#</a> NAT</h1>\n<p>动机：本地网络只要使用<strong>一个 IP 地址</strong>就可以和外部网络相连 :</p>\n<ul>\n<li>\n<p>不需要从 ISP 处获得大批 IP 地址：所有设备可以使用<strong>同一个 IP 地址</strong></p>\n</li>\n<li>\n<p>可以在不通知外部网络的情况下改变内网主机的 IP 地址</p>\n</li>\n<li>\n<p>即使改变了 ISP 也无须改变内网主机的 IP 地址</p>\n</li>\n<li>\n<p>内网主机对外网主机而言是不可见的、不可寻址的。(这也算是一项安全措施).</p>\n</li>\n</ul>\n<p>三种地址转换方式</p>\n<ul>\n<li>\n<p>静态 NAT：一个本地地址对应一个全球地址</p>\n</li>\n<li>\n<p>动态 NAT：一个全球地址对应多个本地地址</p>\n</li>\n<li>\n<p>端口 NAT：一个本地地址的端口对应到一个全球地址的端口</p>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411140819564.png\" alt=\"\"></p>\n<h1 id=\"选路算法\"><a class=\"markdownIt-Anchor\" href=\"#选路算法\">#</a> 选路算法</h1>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411140843643.png\" alt=\"\"></p>\n<h2 id=\"路由信息协议rip\"><a class=\"markdownIt-Anchor\" href=\"#路由信息协议rip\">#</a> 路由信息协议 RIP</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411140824352.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411140825681.png\" alt=\"\"></p>\n<blockquote>\n<p>RIP 路由器更新规则</p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411140825568.png\" alt=\"\"></p>\n<blockquote>\n<p>RIP 协议中，距离 16 表示不可达</p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411140826283.png\" alt=\"\"></p>\n<blockquote>\n<p>坏消息传的慢</p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411140827705.png\" alt=\"\"></p>\n<h2 id=\"开放最短路优先ospf\"><a class=\"markdownIt-Anchor\" href=\"#开放最短路优先ospf\">#</a> 开放最短路优先 OSPF</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411140831734.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411140832764.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411140832541.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411140836018.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411140832664.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411140834167.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411140835313.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411140836785.png\" alt=\"\"></p>\n<h2 id=\"外部网关协议bgp\"><a class=\"markdownIt-Anchor\" href=\"#外部网关协议bgp\">#</a> 外部网关协议 BGP</h2>\n<p>因特网上的 AS 间路由 ——BGP4</p>\n<ul>\n<li>\n<p>因特网的规模太大，使得自治系统之间路由选择非常困难。对于自治系统之间的路由选择，要寻找最佳路由是很不现实的。自治系统之间的路由选择必须考虑有关策略</p>\n</li>\n<li>\n<p>BGP 为每个 AS 提供一种手段，以处理</p>\n<ul>\n<li><strong>eBGP</strong>: 从相邻 AS 获取子网可达性信息</li>\n<li><strong>iBGP</strong>: 向该 AS 内部的所有路由器传播这些可达性信息</li>\n</ul>\n</li>\n<li>\n<p>基于该可达性信息和 AS 策略，决定到达子网的 “好” 路由</p>\n<ul>\n<li>边界网关协议 BGP 只能是力求寻找一条能够到达目的网络且<strong>比较好</strong>的路由（不能兜圈子），而并非要寻找一条最佳路由</li>\n</ul>\n</li>\n</ul>\n<p>BGP 会话：两个 BGP 路由器间通过半永久的<strong> TCP</strong> 连接来交换 BGP 消息</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411140842520.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411140842052.png\" alt=\"\"></p>\n",
            "tags": [
                "计网"
            ]
        },
        {
            "id": "http://www.luckycyyyy.top/2024/10/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91--%E5%BA%94%E7%94%A8%E5%B1%82/",
            "url": "http://www.luckycyyyy.top/2024/10/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91--%E5%BA%94%E7%94%A8%E5%B1%82/",
            "title": "应用层",
            "date_published": "2024-10-18T06:54:14.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"应用层协议原理\"><a class=\"markdownIt-Anchor\" href=\"#应用层协议原理\">#</a> 应用层协议原理</h1>\n<h2 id=\"网络应用的架构\"><a class=\"markdownIt-Anchor\" href=\"#网络应用的架构\">#</a> 网络应用的架构</h2>\n<p><strong>客户端 / 服务器（Client/Server，C/S)</strong></p>\n<p>服务器：</p>\n<ul>\n<li>\n<p>总是打开</p>\n</li>\n<li>\n<p>拥有一个固定的地址</p>\n</li>\n<li>\n<p>缩放的数据中心</p>\n</li>\n</ul>\n<p>客户端：</p>\n<ul>\n<li>与服务器通信</li>\n<li>可能是间歇性连接</li>\n<li>可能有动态的 IP 地址</li>\n<li>客户端之间不能相互通信</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411170837220.png\" alt=\"\"></p>\n<p><strong>对等网（Peer-to-Peer，P2P）</strong></p>\n<ul>\n<li>不一定总在线</li>\n<li>结点之间可以直接通信</li>\n<li>结点的地址以及他们之间的连接可能随时发生变化</li>\n<li>任何一方既提供服务又享受服务，自扩展：新的节点带来新的服务能力，同时也带来新的服务需求</li>\n<li>节点之间是间歇性连接、地址也是变化的</li>\n<li>管理非常复杂</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411170838469.png\" alt=\"\"></p>\n<p><strong>混合体系结构</strong>： C/S+P2P</p>\n<h2 id=\"安全性\"><a class=\"markdownIt-Anchor\" href=\"#安全性\">#</a> 安全性</h2>\n<ul>\n<li>\n<p>TCP/UDP 天生不具备安全性</p>\n</li>\n<li>\n<p>安全套接字层 SSL</p>\n<ul>\n<li>提供加密的 TCP 连接</li>\n<li>数据的完整性检查</li>\n<li>端点身份鉴别</li>\n<li>SSL 位于应用层与 TCP 之间</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"web和http\"><a class=\"markdownIt-Anchor\" href=\"#web和http\">#</a> WEB 和 HTTP</h1>\n<h2 id=\"web的构成\"><a class=\"markdownIt-Anchor\" href=\"#web的构成\">#</a> WEB 的构成</h2>\n<blockquote>\n<p>WEB 属于 C/S 模式</p>\n</blockquote>\n<p><strong>WEB 服务器</strong>：IIS、Apache、TomCat……</p>\n<p><strong>浏览器</strong>：IE、Maxthon、Firefox</p>\n<p><strong>协议</strong></p>\n<ul>\n<li>信息<strong>表达</strong>的协议 ——HTML</li>\n<li>信息<strong>传输</strong>的协议 ——HTTP</li>\n</ul>\n<h2 id=\"http\"><a class=\"markdownIt-Anchor\" href=\"#http\">#</a> HTTP</h2>\n<h3 id=\"客户端服务器模式\"><a class=\"markdownIt-Anchor\" href=\"#客户端服务器模式\">#</a> 客户端 / 服务器模式</h3>\n<p><strong>客户端:</strong> 浏览器<strong>请求、接收、展示</strong> Web 对象</p>\n<p><strong>服务器</strong>: Web 服务器发送对象对请求进行<strong>响应</strong></p>\n<h3 id=\"tcp-传输服务\"><a class=\"markdownIt-Anchor\" href=\"#tcp-传输服务\">#</a> TCP 传输服务</h3>\n<p>客户端启动 TCP 连接 (创建套接字) 到服务器，端口 <strong>80</strong></p>\n<p>服务器接受来自客户端的 TCP 连接</p>\n<ul>\n<li>\n<p>http 报文 (应用层协议报文) 在浏览器 (http client) 和 Web 服务器 (http server) 之间进行交换</p>\n</li>\n<li>\n<p>关闭 TCP 连接</p>\n</li>\n</ul>\n<p>HTTP 是 “<strong>无状态有连接</strong> &quot; 的，服务器<strong>不保留</strong>任何访问过的请求信息</p>\n<h3 id=\"http连接\"><a class=\"markdownIt-Anchor\" href=\"#http连接\">#</a> HTTP 连接</h3>\n<p><strong>非持续 HTTP</strong></p>\n<img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411182105298.png\" style=\"zoom:67%;\" />\n<p>总时间 = 2RTT + 文件传输时间</p>\n<ul>\n<li>\n<p>通过 TCP 连接最多发送一个对象</p>\n</li>\n<li>\n<p>连接然后被关闭</p>\n</li>\n<li>\n<p>下载多个对象需要建立多个连接</p>\n</li>\n</ul>\n<p><strong>持续 HTTP</strong></p>\n<ul>\n<li>客户端和服务器之间的单个 TCP 连接上可以发送<strong>多个</strong>对象</li>\n<li>服务器在发送响应后，<strong>不再断开 TCP 连接</strong>，而是保持该连接，用于后续对象的传送，直至该连接 “休息” 了一个较长的时间后，方断开该连接</li>\n<li>减少了对服务器端连接数的需要，从而减少了对服务器端套接字资源的占用，提高了服务器的负载能力</li>\n<li>持久连接又可以分为\n<ol>\n<li><strong>非流水线</strong>方式：一个<strong>对象传输完成</strong>方能传输下一个</li>\n<li><strong>流水线</strong>方式：可以<strong>一次性发送所有请求</strong>，慢慢接收</li>\n</ol>\n</li>\n</ul>\n<p><strong>HTTP 请求报文</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411170854337.png\" alt=\"\"></p>\n<p><strong>HTTP 响应报文</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411170854380.png\" alt=\"\"></p>\n<img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411170855360.png\" style=\"zoom: 67%;\" />\n<h1 id=\"用户-服务器交互cookie\"><a class=\"markdownIt-Anchor\" href=\"#用户-服务器交互cookie\">#</a> 用户 - 服务器交互：Cookie</h1>\n<p><strong>Cookie</strong> 是一种由服务器生成并存储在用户浏览器中的小型文本文件，用于在客户端和服务器之间保存状态信息。它主要用于以下几种场景：</p>\n<p><strong>Cookie 的主要用途</strong></p>\n<ol>\n<li><strong>会话管理</strong>\n<ul>\n<li>例如用户登录状态、购物车信息、游戏进度等。</li>\n<li>当用户访问网站时，服务器可以通过 Cookie 识别用户是否已经登录，或者存储用户的偏好设置。</li>\n</ul>\n</li>\n<li><strong>个性化设置</strong>\n<ul>\n<li>网站可以通过 Cookie 存储用户的语言偏好、主题选择等，使用户获得更符合个人习惯的浏览体验。</li>\n</ul>\n</li>\n<li><strong>跟踪与分析</strong>\n<ul>\n<li>Cookie 被用来记录用户在网站上的行为，例如访问的页面、点击的内容等。这对广告投放和数据分析非常重要。</li>\n</ul>\n</li>\n</ol>\n<p><strong>Cookie 技术的组成部分:</strong></p>\n<ul>\n<li>\n<p>在 HTTP 响应报文中有一个 Cookie 首部行</p>\n</li>\n<li>\n<p>在 HTTP 请求报文中也有一个 Cookie 首部行</p>\n</li>\n<li>\n<p>在用户的端系统中保留了一个 Cookie 文件，由用户浏览器负责管理</p>\n</li>\n<li>\n<p>在 Web 站点有一个后端数据库</p>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411170859642.png\" alt=\"\"></p>\n<h1 id=\"文件传输协议ftp\"><a class=\"markdownIt-Anchor\" href=\"#文件传输协议ftp\">#</a> 文件传输协议：FTP</h1>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411171002874.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411170958896.png\" alt=\"\"></p>\n<p>习题：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411170957442.png\" alt=\"\"></p>\n<h1 id=\"电子邮件\"><a class=\"markdownIt-Anchor\" href=\"#电子邮件\">#</a> 电子邮件</h1>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411171021688.png\" alt=\"\"></p>\n<h2 id=\"实现过程\"><a class=\"markdownIt-Anchor\" href=\"#实现过程\">#</a> 实现过程</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411171004259.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411171005173.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411171007958.png\" alt=\"\"></p>\n<p>习题：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411171023889.png\" alt=\"\"></p>\n<h2 id=\"邮件格式\"><a class=\"markdownIt-Anchor\" href=\"#邮件格式\">#</a> 邮件格式</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411171022811.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411171019582.png\" alt=\"\"></p>\n<h2 id=\"邮件读取格式\"><a class=\"markdownIt-Anchor\" href=\"#邮件读取格式\">#</a> 邮件读取格式</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411171022358.png\" alt=\"\"></p>\n<h2 id=\"基于万维网的电子邮件\"><a class=\"markdownIt-Anchor\" href=\"#基于万维网的电子邮件\">#</a> 基于万维网的电子邮件</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411171023126.png\" alt=\"\"></p>\n<h1 id=\"dns\"><a class=\"markdownIt-Anchor\" href=\"#dns\">#</a> DNS</h1>\n<h2 id=\"简况\"><a class=\"markdownIt-Anchor\" href=\"#简况\">#</a> 简况</h2>\n<ul>\n<li>\n<p>DNS 是一个分布式数据库，由很多台 DNS 服务器按照层次结构组织起来</p>\n</li>\n<li>\n<p>DNS 运行在端到端系统上，且使用 UDP 协议（53 号端口）进行报文传输，因此 DNS 是应用层协议</p>\n</li>\n<li>\n<p>DNS 以 C/S 的模式工作</p>\n</li>\n<li>\n<p>DNS 不直接和用户打交道，而是因特网的核心功能</p>\n</li>\n</ul>\n<h2 id=\"结构\"><a class=\"markdownIt-Anchor\" href=\"#结构\">#</a> 结构</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411171053144.png\" alt=\"\"></p>\n<p><strong>根 DNS 服务器</strong>：如果域名映射未知，则向授权域名服务器查询；取得映射；将映射返回本地域名服务器</p>\n<p><strong>顶级域 DNS 服务器</strong>：负责顶级域名和所有国家的顶级域名解析工作，例如：com, org, net, gov, uk, cn, jp 等</p>\n<p><strong>权威 DNS 服务器</strong>：属于某个组织的 DNS 服务器，为组织的服务器提供一个权威的域名到 IP 地址的映射服务 (例如：Web 和 mail)</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411171056288.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411171056669.png\" alt=\"\"></p>\n<h2 id=\"域名解析过程\"><a class=\"markdownIt-Anchor\" href=\"#域名解析过程\">#</a> 域名解析过程</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411171057358.png\" alt=\"\"></p>\n<h2 id=\"dns缓存\"><a class=\"markdownIt-Anchor\" href=\"#dns缓存\">#</a> DNS 缓存</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411171058954.png\" alt=\"\"></p>\n<p>习题：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411171058034.png\" alt=\"\"></p>\n<h2 id=\"dns提供服务\"><a class=\"markdownIt-Anchor\" href=\"#dns提供服务\">#</a> DNS 提供服务</h2>\n<ul>\n<li>域名到 IP 地址的转换</li>\n<li>主机 / 邮件服务器别名：为不好记的规范主机 / 邮件服务器名提供一个易记的别名 e.g. <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ob3RtYWlsLmNvbQ==\">www.hotmail.com</span> -&gt; <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ob3RtYWlsLmFhdGUubnNhdGMubmV0\">www.hotmail.aate.nsatc.net</span></li>\n<li>负载均衡\n<ul>\n<li>一个域名对应多个 IP</li>\n<li>DNS 服务器在多个 IP 中进行轮转</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411171100551.png\" alt=\"\"></p>\n<h1 id=\"p2p文件共享\"><a class=\"markdownIt-Anchor\" href=\"#p2p文件共享\">#</a> P2P 文件共享</h1>\n<img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411171105425.png\" style=\"zoom:67%;\" />",
            "tags": [
                "计网"
            ]
        },
        {
            "id": "http://www.luckycyyyy.top/2024/10/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91--%E8%BF%90%E8%BE%93%E5%B1%82/",
            "url": "http://www.luckycyyyy.top/2024/10/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91--%E8%BF%90%E8%BE%93%E5%B1%82/",
            "title": "运输层",
            "date_published": "2024-10-11T04:48:23.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"概述运输层服务\"><a class=\"markdownIt-Anchor\" href=\"#概述运输层服务\">#</a> 概述运输层服务</h1>\n<p>运输层为运行在<strong>不同</strong>主机上的<strong>应用进程</strong>提供直接的通信服务。</p>\n<p>运输层协议是在<strong>端系统</strong>中而不是在路由器中实现的。具体实现过程如下：</p>\n<ol>\n<li>\n<p><strong>发送端</strong>：运输层将从发送应用程序进程接收到的报文转换成运输层分组，即运输层报文段（先将应用报文划分成小块，再加上运输层首部）。运输层将这些报文段发送给网络层，网络层将其封装成网络分组（即数据报）并向目的地发送。<strong>网络路由器</strong>只作用于数据报的<strong>网络层字段</strong>，而<strong>不</strong>检查封装在该数据报运输层报文段的字段。</p>\n</li>\n<li>\n<p><strong>接收端</strong>：网络层从数据报中提取运输层报文段并将该报文段向上交给运输层。</p>\n</li>\n</ol>\n<h2 id=\"运输层和网络层的关系\"><a class=\"markdownIt-Anchor\" href=\"#运输层和网络层的关系\">#</a> 运输层和网络层的关系</h2>\n<p>网络层提供<strong>主机</strong>间的逻辑通信，运输层为运行在<strong>不同主机上的进程</strong>之间提供逻辑通信。</p>\n<p>在端系统中运输层协议将来自应用进程的报文<strong>移动到网络边缘</strong>（即网络层）。</p>\n<p>计算机网络中可以安排多种运输层协议，每种协议为应用程序提供<strong>不同</strong>的服务模型。</p>\n<p>运输层协议能够提供的服务尝尝<strong>受制于</strong>底层网络层协议的服务模型。</p>\n<p>即使网络层不能保证运输层报文段的机密性，运输协议也能使用加密来确保应用程序报文不被入侵者读取。</p>\n<h2 id=\"运输层概述\"><a class=\"markdownIt-Anchor\" href=\"#运输层概述\">#</a> 运输层概述</h2>\n<p>UDP（用户数据报协议）：提供不可靠、无连接的服务，只能提供数据交付和差错检查。</p>\n<p>TCP（传输控制协议）：提供可靠的、面向连接的服务。</p>\n<h1 id=\"多路复用与多路分解\"><a class=\"markdownIt-Anchor\" href=\"#多路复用与多路分解\">#</a> 多路复用与多路分解</h1>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411191132567.png\" alt=\"\"></p>\n<p>一个进程有一个或多个套接字（ip + 端口号），接收主机怎样将一个到达的运输层报文段定向到适当的套接字？</p>\n<p><strong>多路分解</strong>：在接收端，运输层检查这些字段，标识出接收套接字，进而将报文段定向到该套接字。将运输层报文段中的数据交付到正确的套接字的工作称为多路分解。</p>\n<p><strong>多路复用</strong>：在源主机从不同套接字中收集数据块，并为每个数据块封装上首部信息从而生成报文段，然后将报文段传递到网络层，这所有的工作称为多路复用。</p>\n<p>运输层报文段的结构：</p>\n<img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/PictureBed/master/img/202410111333486.png\" style=\"zoom: 50%;\" />\n<p>应用程序的客户端让运输层自动地分配端口号，服务器端则分配一个特定的端口号。</p>\n<p>UDP 套接字由一个<strong>二元组</strong>全面标识，该二元组包含一个目的 ip 和一个目的端口号。</p>\n<p>TCP 套接字由一个<strong>四元组</strong>全面标识，该四元组包含源 ip 地址、源端口号、目的 ip 地址、目的端口号。</p>\n<h1 id=\"udp和tcp对比\"><a class=\"markdownIt-Anchor\" href=\"#udp和tcp对比\">#</a> UDP 和 TCP 对比</h1>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411191146630.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411191148024.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411191149976.png\" alt=\"\"></p>\n<h1 id=\"无连接运输udp\"><a class=\"markdownIt-Anchor\" href=\"#无连接运输udp\">#</a> 无连接运输：UDP</h1>\n<p><strong>UDP 优点：</strong></p>\n<ol>\n<li>关于发送什么数据以及何时发送的应用层控制更为精细（没有拥塞控制机制），按需随时发送。</li>\n<li>无需建立连接，不会引入建立连接的时延。</li>\n<li>无连接状态，TCP 维护连接状态需要维护包括接收和发送缓存、拥塞控制参数、序号与确认号的参数，而 UDP 不需要，因此当应用程序运行在 UDP 上，某些专门用于某种特定应用的服务器一般都能支持更多的活跃用户。</li>\n<li>首部开销小。UDP：8Byte，TCP：20Byte</li>\n</ol>\n<p>但是因为 UDP 没有拥塞控制，所以如果网络进入拥塞状态，UDP 的<strong>高丢包率</strong>会引起<strong> TCP</strong> 的发送方大大<strong>减小</strong>它们的<strong>速率</strong>。</p>\n<p><strong>采用 UDP 的应用：</strong></p>\n<ol>\n<li>远程文件服务器（NFS）</li>\n<li>流式多媒体</li>\n<li>因特网电话</li>\n<li>网络管理（SNMP）</li>\n<li>选路协议（RIP）</li>\n<li>域名解析（NDS）</li>\n</ol>\n<p><strong>UDP 报文段：</strong></p>\n<img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/PictureBed/master/img/202410111413149.jpg\" style=\"zoom: 25%;\" />\n<p>UDP 首部有 4 个字段，每个字段由两个字节组成。</p>\n<p>长度：首部 + 数据。</p>\n<p>接收方通过检验和检查该报文段是否出现问题。</p>\n<p><strong>UDP 检验和</strong>：</p>\n<ol>\n<li>将报文段切成 16bit 的数据</li>\n<li>对报文段中所有 16 比特字的和进行反码运算，求和时任何溢出都被回卷（进的位回到个位）</li>\n<li>因为原码 + 反码 = 全 1，所以检查是否为全 1 即可</li>\n</ol>\n<h1 id=\"可靠数据传输原理\"><a class=\"markdownIt-Anchor\" href=\"#可靠数据传输原理\">#</a> 可靠数据传输原理</h1>\n<blockquote>\n<p>rdt1.0~rdt3.0 都使用停等协议</p>\n<p>停等协议：发送方发送数据后等待接收方的响应</p>\n</blockquote>\n<h2 id=\"经完全可靠的信道的可靠信息传输rdt10\"><a class=\"markdownIt-Anchor\" href=\"#经完全可靠的信道的可靠信息传输rdt10\">#</a> 经完全可靠的信道的可靠信息传输：rdt1.0</h2>\n<p>底层信道完全可靠。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/PictureBed/master/img/202410111431075.png\" alt=\"\"></p>\n<p>有限状态机（FSM）</p>\n<p>因为底层信道完全可靠，所以接收方不需要反馈信息给发送方。</p>\n<h2 id=\"经具有比特差错信道的可靠数据传输rdt2x\"><a class=\"markdownIt-Anchor\" href=\"#经具有比特差错信道的可靠数据传输rdt2x\">#</a> 经具有比特差错信道的可靠数据传输：rdt2.x</h2>\n<blockquote>\n<p>2.x 解决了流控问题</p>\n</blockquote>\n<p>底层信道分组中的比特可能受损。</p>\n<h3 id=\"20-发送的数据受损\"><a class=\"markdownIt-Anchor\" href=\"#20-发送的数据受损\">#</a> 2.0 发送的数据受损</h3>\n<p>采用自动重传请求协议（ARQ），进行差错检测、接收方反馈（ACK/NAK）、重传</p>\n<p>重传：使用缓冲区缓存已发出但未收到反馈的报文段</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/PictureBed/master/img/202410111441861.png\" alt=\"\"></p>\n<h3 id=\"21-acknak受损\"><a class=\"markdownIt-Anchor\" href=\"#21-acknak受损\">#</a> 2.1 ACK/NAK 受损</h3>\n<p>发送方不知道接收方的情况，只能重传。</p>\n<p>但是可能导致接收方的重复接收，那么接收方怎么知道收到的分组是新的还是一次重传？于是引入分组编号。</p>\n<p>因为只有两种状态：新的分组或者重传，所以只需要编号 0 和 1。如果收到的分组和上一次收到的分组编号一致，说明是一次重传</p>\n<h3 id=\"22-使用一个无nak的可靠数据传输协议\"><a class=\"markdownIt-Anchor\" href=\"#22-使用一个无nak的可靠数据传输协议\">#</a> 2.2 使用一个无 NAK 的可靠数据传输协议</h3>\n<p><strong>重复的 ACK = NAK</strong>：不发送 NAK，而是对上次正确接收的分组发送一个 ACK；即当发送方接收到冗余的 ACK，就知道接收方没有正确接收到跟在被确认两次的分组后的分组。</p>\n<h2 id=\"经具有比特差错的丢包信道的可靠数据传输rdt30\"><a class=\"markdownIt-Anchor\" href=\"#经具有比特差错的丢包信道的可靠数据传输rdt30\">#</a> 经具有比特差错的丢包信道的可靠数据传输：rdt3.0</h2>\n<p>除了比特受损外，底层信道还会丢包。</p>\n<p>设置倒计数定时器，面对超时的数据进行重传。如果数据本身未丢失只是超时了，就会导致冗余数据分组，直接忽略即可。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/PictureBed/master/img/202410111509160.jpg\" alt=\"\"></p>\n<h2 id=\"流水线可靠数据传输协议\"><a class=\"markdownIt-Anchor\" href=\"#流水线可靠数据传输协议\">#</a> 流水线可靠数据传输协议</h2>\n<p>因为 rdt3.0 使用的是停等协议，所以效率较低，于是使用流水线技术。</p>\n<p>允许发送方发送多个分组并无需等待确认</p>\n<ol>\n<li>原本的两个序号（0,1）不够用，必须增大序号范围</li>\n<li>发送方最低限度应能缓存那些已发送但未被确认的分组</li>\n<li>接收方需缓存那些已经正确接收的分组</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/PictureBed/master/img/202410111519103.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/PictureBed/master/img/202410111522171.png\" alt=\"\"></p>\n<p>当流水线技术中丢失一个分组，差错恢复有两种方法：<strong>回退 N 步</strong>和<strong>选择重传</strong>。</p>\n<h3 id=\"回退n步协议gbn\"><a class=\"markdownIt-Anchor\" href=\"#回退n步协议gbn\">#</a> 回退 N 步协议（GBN）</h3>\n<p><strong>累计确认 ACK (n)</strong>：接收方对序号 n 之前包括 n 在内的所有分组进行确认</p>\n<p><strong>超时事件</strong>：发送方重传所有已发送但未被确认的分组，发送方只使用一个定时器，如果收到一个 ACK 但是仍有已发送但未被确认的分组，则定时器被重新启动。</p>\n<p><strong>分组失序</strong>：接收方无缓存，所以直接丢弃，重发按序到达的最高序号后面的分组</p>\n<p><strong>滑动窗口大小</strong>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mtext>发送端</mtext><mo>≤</mo><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>1</mn><mtext>，接收端</mtext><mo>=</mo><mn>1</mn></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{发送端\\leq 2^{k}-1，接收端=1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.985078em;vertical-align:-0.13597em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord cjk_fallback\" style=\"color:red;\">发</span><span class=\"mord cjk_fallback\" style=\"color:red;\">送</span><span class=\"mord cjk_fallback\" style=\"color:red;\">端</span><span class=\"mspace\" style=\"color:red;margin-right:0.2777777777777778em;\"></span><span class=\"mrel\" style=\"color:red;\">≤</span><span class=\"mspace\" style=\"color:red;margin-right:0.2777777777777778em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord\" style=\"color:red;\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color:red;\"><span class=\"mord mtight\" style=\"color:red;\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;color:red;\">k</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"color:red;margin-right:0.2222222222222222em;\"></span><span class=\"mbin\" style=\"color:red;\">−</span><span class=\"mspace\" style=\"color:red;margin-right:0.2222222222222222em;\"></span><span class=\"mord\" style=\"color:red;\">1</span><span class=\"mord cjk_fallback\" style=\"color:red;\">，</span><span class=\"mord cjk_fallback\" style=\"color:red;\">接</span><span class=\"mord cjk_fallback\" style=\"color:red;\">收</span><span class=\"mord cjk_fallback\" style=\"color:red;\">端</span><span class=\"mspace\" style=\"color:red;margin-right:0.2777777777777778em;\"></span><span class=\"mrel\" style=\"color:red;\">=</span><span class=\"mspace\" style=\"color:red;margin-right:0.2777777777777778em;\"></span><span class=\"mord\" style=\"color:red;\">1</span></span></span></span></span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411191437793.png\" alt=\"\"></p>\n<h3 id=\"选择重传sr\"><a class=\"markdownIt-Anchor\" href=\"#选择重传sr\">#</a> 选择重传（SR）</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411191444933.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411191448175.png\" alt=\"\"></p>\n<p><strong>发送方</strong>：</p>\n<ol>\n<li>从上层收到数据：如果下一个可用于该分组的序号在窗口内，则将数据打包并发送。</li>\n<li>超时（n）：为每个分组定义定时器；重传分组 n，重置定时器</li>\n<li>收到确认（n）在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>s</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mo separator=\"true\">,</mo><mi>s</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mo>+</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[sendbase,sendbase+N-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 范围内：标记分组 n 为已接收，如果 n 是发送方窗口基序号 sendbase，则将窗口基序号推到下一个未确认序号</li>\n</ol>\n<p><strong>接收方</strong>：</p>\n<ol>\n<li>分组序号 n 在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>r</mi><mi>c</mi><mi>v</mi><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mo separator=\"true\">,</mo><mi>r</mi><mi>c</mi><mi>v</mi><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mo>+</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[rcvbase,rcvbase+N-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 范围内\n<ul>\n<li>发送 n 的确认 ACK（n）</li>\n<li>如果分组序号失序，将其缓存</li>\n<li>按序分组：将该分组以及以前的缓存的序号连续的分组一起交付给上层，将窗口前推到下一个未收到的分组。</li>\n<li>再次发送 n 的确认 ACK</li>\n</ul>\n</li>\n<li>其他情况，忽略该分组</li>\n</ol>\n<p>接收方窗口 **<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\leq 2^{k-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>**，即窗口的长度必须小于等于序号空间大小的一半</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/PictureBed/master/img/202410120031874.png\" alt=\"\"></p>\n<h1 id=\"面向连接的运输tcp\"><a class=\"markdownIt-Anchor\" href=\"#面向连接的运输tcp\">#</a> 面向连接的运输：TCP</h1>\n<h2 id=\"tcp的特点\"><a class=\"markdownIt-Anchor\" href=\"#tcp的特点\">#</a> TCP 的特点</h2>\n<p><strong>面向连接</strong>：必须相互发送某些预备报文段，以建立确保数据传输的参数。</p>\n<p><strong>全双工服务</strong>：可双向同时传输数据。</p>\n<p><strong>点对点连接</strong>：仅能存在于两个端系统之间。</p>\n<p><strong>三次握手</strong>：客户端先发送一个特殊的 TCP 报文段，服务器用一个特殊的报文段进行响应，这两个报文段都不含应用层数据；最后客户端用第三个特殊报文段作为响应，第三个报文段可以承载有效数据。</p>\n<p><strong>可靠的字节流</strong>：TCP 可以从缓存中取出并放入报文段中的数据数量受限于最大报文段长度 MSS，MSS 由本地发送主机发送的最大链路层帧长度【即最大运输单元 MTU】设置。MSS 要保证加上 TCP/IP 首部长度（通常是 40 字节）将适合单个链路层帧。</p>\n<p>注意：MSS 是指报文段中<strong>应用层数据的最大长度</strong>，而<strong>不是</strong>指包括首部的 TCP 报文段的最大长度。</p>\n<h2 id=\"tcp报文段结构\"><a class=\"markdownIt-Anchor\" href=\"#tcp报文段结构\">#</a> TCP 报文段结构</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/PictureBed/master/img/202410141051586.png\" alt=\"\"></p>\n<p><strong>源端口和目的端口</strong>：各占 2 字节，端口是应用层和运输层的服务端口。运输层的复用和分解都需要通过端口实现。</p>\n<p><strong>序号</strong>：占 4 字节，TCP 连接中传输的数据流的每一个字节都有一个序号，序号字段的值指的是本报文段所发送的数据的第一个字节在整个报文字节流中的序号。</p>\n<p><strong>确认号</strong>：占 4 字节，是期望收到对方的下一个报文段的数据段的第一个字节的序号。</p>\n<p><strong>首部长度</strong>：占 4bit，该字段指示了以 32bit 的字为单位的 TCP 首部长度。（通常选项字段为空，TCP 首部典型长度是 20 字节）</p>\n<p><strong>保留字段</strong>：占 6bit，保留为今后使用，但目前应置为 0。</p>\n<p><strong>URG</strong>：紧急比特，UGR=1 表明此报文段中有紧急数据，应尽快送达。</p>\n<p><strong>ACK</strong>：确认 ACK，只有当 ACK=1 时确认号字段才有效；ACK=0 时，确认号无效。</p>\n<p><strong>PSH</strong>：接收到 PSH=1 的报文段，就尽快交付给接收应用进程，而不再等到整个缓存都填满再向上交付。</p>\n<p><strong>RST</strong>：当 RST=1 时，表名 TCP 连接中出现严重差错，必须释放连接，然后再重新建立运输链接。</p>\n<p><strong>SYN</strong>：同步比特，SYN=1，这是一个连接请求或连接接收的报文。</p>\n<p><strong>FIN</strong>：释放一个链接，当 FIN=1，此报文段的发送端的数据已经发送完毕，并要求释放运输链接。</p>\n<p><strong>窗口</strong>：占 2 字节，窗口字段用来控制对方发送的数据量，单位为字节。</p>\n<p><strong>检验和</strong>：占 2 字节，检验范围包括首部和数据两部分，计算时要在 TCP 报文段的前面加上 12 字节的伪首部。</p>\n<p><strong>紧急指针</strong>：占 2 字节，指出本报文段中紧急数据的最后一个字节的序号。</p>\n<p><strong>填充</strong>：为了使整个首部的长度是 4 字节的整数倍。</p>\n<h2 id=\"估计往返时间rtt\"><a class=\"markdownIt-Anchor\" href=\"#估计往返时间rtt\">#</a> 估计往返时间 RTT</h2>\n<p>在任意时刻，仅为一个已发送但目前尚未被确定的报文段估计 SampleRTT，从而产生一个接近每个 RTT 的新的 SampleRTT。</p>\n<p>TCP 不为已被重传的报文段计算 SampleRTT。</p>\n<p>因为 RTT 有波动，所以利用加权平均值计算 EstimatedRTT</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>E</mi><mi>s</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi>R</mi><mi>T</mi><mi>T</mi><mo>=</mo><mn>0.875</mn><mo>∗</mo><mi>E</mi><mi>s</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi>R</mi><mi>T</mi><mi>T</mi><mo>+</mo><mn>0.125</mn><mo>∗</mo><mi>S</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi><mi>R</mi><mi>T</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">EstimatedRTT=0.875*EstimatedRTT+0.125*SampleRTT\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">7</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></p>\n<p>估算 SampleRTT 偏离 EstimatedRTT 的程度：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>D</mi><mi>e</mi><mi>v</mi><mi>R</mi><mi>T</mi><mi>T</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>β</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mi>D</mi><mi>e</mi><mi>v</mi><mi>R</mi><mi>T</mi><mi>T</mi><mo>+</mo><mi>β</mi><mo>⋅</mo><mi mathvariant=\"normal\">∣</mi><mi>S</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi><mi>R</mi><mi>T</mi><mi>T</mi><mo>−</mo><mi>E</mi><mi>s</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi>R</mi><mi>T</mi><mi>T</mi><mi mathvariant=\"normal\">∣</mi><mo separator=\"true\">,</mo><mi>β</mi><mtext>推荐值为</mtext><mn>0.25</mn></mrow><annotation encoding=\"application/x-tex\">DevRTT=(1-\\beta)\\cdot DevRTT+\\beta\\cdot|SampleRTT-EstimatedRTT|,\\beta推荐值为0.25\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord\">∣</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mord cjk_fallback\">推</span><span class=\"mord cjk_fallback\">荐</span><span class=\"mord cjk_fallback\">值</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span></span></span></p>\n<p>第一次计算时<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mi>e</mi><mi>v</mi><mi>R</mi><mi>T</mi><mi>T</mi><mo>=</mo><mn>0.5</mn><mo>∗</mo><mi>S</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi><mi>R</mi><mi>T</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">DevRTT=0.5*SampleRTT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span></p>\n<p>TCP 中确定重传超时间隔的方法：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mi>i</mi><mi>m</mi><mi>e</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo>=</mo><mi>E</mi><mi>s</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi>R</mi><mi>T</mi><mi>T</mi><mo>+</mo><mn>4</mn><mo>⋅</mo><mi>D</mi><mi>e</mi><mi>v</mi><mi>R</mi><mi>T</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">TimeoutInterval=EstimatedRTT+4\\cdot DevRTT\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></p>\n<p>推荐初始的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>i</mi><mi>m</mi><mi>e</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo>=</mo><mn>1</mn><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">TimeoutInterval = 1s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord mathnormal\">s</span></span></span></span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411191411344.png\" alt=\"\"></p>\n<p>出现超时 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mi>T</mi><mi>O</mi><mo>∗</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">RTO*2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span></p>\n<h2 id=\"可靠数据传输\"><a class=\"markdownIt-Anchor\" href=\"#可靠数据传输\">#</a> 可靠数据传输</h2>\n<p>TCP 使用<strong>单一定时器</strong>。</p>\n<p>从上面应用程序收到数据 e：如果当前定时器没有运行，启动定时器并向 IP 传递报文段。</p>\n<p>定时器超时：重传具有最小序号但仍未应答的报文段并启动定时器。</p>\n<p>收到 ACK，具有 ACK 字段值 y：如果 <code>y &gt; SendBase</code> ，重置 <code>Sendbase = y</code> ，如果仍有尚未确认的报文段，启动定时器。</p>\n<p>（SendBase 是最早未被确认的字节的序号，SendBase - 1 是指接收方已正确按序接收到的数据的最后一个字节的序号）</p>\n<p><strong>超时间隔加倍</strong>：每次超时时间发生，TCP 重传时都会将下一次的超时时间间隔设为先前的两倍。</p>\n<p><strong>快速重传</strong>：当 TCP 接收方检测到了数据流中的一个间隔，就会不断重发它期望的这个 ACK，当冗余 ACK 的数量达到 3 的时候，就采用快速重传机制，在超时之前就重传该分组。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/PictureBed/master/img/202410141803966.png\" alt=\"\"></p>\n<h2 id=\"流量控制\"><a class=\"markdownIt-Anchor\" href=\"#流量控制\">#</a> 流量控制</h2>\n<p>接收方在反馈时，将缓冲区剩余空间的大小填充在报文段首部的窗口字段中，通知发送方</p>\n<p>主机 A 向主机 B 发送文件，主机 B 接收缓存的大小是 RcvBuffer；主机 B 上的应用进程从缓存读出的数据流的最后一个字节的编号是 LastByteRead；从网络中到达的并且已放入主机 B 接收缓存中的数据流的最后一个字节的编号。</p>\n<p>接收窗口的大小：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>w</mi><mi>n</mi><mi>d</mi><mo>=</mo><mi>R</mi><mi>c</mi><mi>v</mi><mi>B</mi><mi>u</mi><mi>f</mi><mi>f</mi><mi>e</mi><mi>r</mi><mo>−</mo><mo stretchy=\"false\">(</mo><mi>L</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi>B</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>a</mi><mi>d</mi><mo>−</mo><mi>L</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi>B</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>a</mi><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">rwnd = RcvBuffer - (LastByteRead - LastByteRead)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>为让发送方在接收方的缓存满了之后可以及时了解什么时候又有新的空间，发送方持续向接收方发送只有<strong>一字节</strong>数据的报文段。</p>\n<h2 id=\"tcp连接管理\"><a class=\"markdownIt-Anchor\" href=\"#tcp连接管理\">#</a> TCP 连接管理</h2>\n<p>3 次握手，4 次分手</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411191517080.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411191509839.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411191514191.png\" alt=\"\"></p>\n<h1 id=\"拥塞控制协议\"><a class=\"markdownIt-Anchor\" href=\"#拥塞控制协议\">#</a> 拥塞控制协议</h1>\n<p><strong>拥塞控制方法</strong>：</p>\n<p><strong>网络辅助的拥塞控制</strong></p>\n<ul>\n<li>\n<p>直接网络反馈：<strong>路由器</strong>以阻塞分组的形式通知发送方 “网络拥塞了”</p>\n</li>\n<li>\n<p>经由接收方的网络反馈：路由器标识从发送方流向接收方分组中的某个字段以指示拥塞的产生，由<strong>接收方</strong>通知发送方 “网络拥塞了”（至少要经过一个完整的往返时间）</p>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202410181313027.jpg\" alt=\"\"></p>\n<p><strong>端到端拥塞控制</strong></p>\n<ul>\n<li>\n<p>网络层不为拥塞控制提供任何帮助和支持</p>\n</li>\n<li>\n<p>端系统通过对网络行为（丢包或时延增加）的观测判断网络是否发生拥塞</p>\n</li>\n<li>\n<p>目前 TCP 采用该种方法（通过三个冗余的 ACK 实现）</p>\n</li>\n</ul>\n<h1 id=\"tcp拥塞控制\"><a class=\"markdownIt-Anchor\" href=\"#tcp拥塞控制\">#</a> TCP 拥塞控制</h1>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411191357221.png\" alt=\"\"></p>\n<h2 id=\"reno算法\"><a class=\"markdownIt-Anchor\" href=\"#reno算法\">#</a> Reno 算法</h2>\n<p><strong>加性增，乘性减（AIMD）</strong></p>\n<ol>\n<li>\n<p>出现丢包事件后将当前 CongWin 大小<strong>减半</strong>，可以大大减少注入到网络中的分组数</p>\n</li>\n<li>\n<p>当<strong>没有丢包</strong>事件发生了，每个 RTT 之后将 CongWin<strong> 增大 1 个 MSS</strong>，使拥塞窗口缓慢增大，以防止网络过早出现拥塞</p>\n</li>\n</ol>\n<h3 id=\"慢启动和拥塞避免\"><a class=\"markdownIt-Anchor\" href=\"#慢启动和拥塞避免\">#</a> 慢启动和拥塞避免</h3>\n<p><strong>建立连接时，CongWin = 1 MSS</strong></p>\n<p>eg：</p>\n<ol>\n<li><strong>MSS（最大报文段大小）</strong> = 500 字节</li>\n<li><strong>CongWin</strong> = 1 MSS = 500 字节 = 500 * 8 比特</li>\n<li><strong>RTT</strong> = 200 毫秒</li>\n</ol>\n<p>所以<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>初始速率</mtext><mo>=</mo><mfrac><mrow><mn>500</mn><mo>∗</mo><mn>8</mn></mrow><mn>200</mn></mfrac><mo>=</mo><mn>20</mn><mi>k</mi><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">初始速率=\\frac{500 * 8}{200}=20kbps</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">初</span><span class=\"mord cjk_fallback\">始</span><span class=\"mord cjk_fallback\">速</span><span class=\"mord cjk_fallback\">率</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">0</span><span class=\"mbin mtight\">∗</span><span class=\"mord mtight\">8</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">s</span></span></span></span></p>\n<p><strong>可用带宽 &gt;&gt; MSS/RTT</strong></p>\n<ul>\n<li>\n<p>初始阶段以指数的速度增加发送速率</p>\n</li>\n<li>\n<p>连接初始阶段，以<strong>指数的速度</strong>增加发送速率，直到发生一个丢包事件为止</p>\n</li>\n<li>\n<p>每收到一次确认则将 CongWin 的值<strong>增加一个 MSS</strong></p>\n</li>\n</ul>\n<img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202410181412990.png\" style=\"zoom: 50%;\" />\n<p>对收到<strong> 3 个重复 ACK</strong> 的反应</p>\n<ul>\n<li>\n<p>将<strong> CongWin 减</strong>为原来的<strong>一半</strong></p>\n</li>\n<li>\n<p><strong>线性增大</strong>拥塞窗口</p>\n</li>\n</ul>\n<p>对<strong>超时</strong>事件的反应</p>\n<ul>\n<li>\n<p><strong>门限值</strong>设为当前 CongWin 的<strong>一半</strong>（门限值初始值 65kB）</p>\n</li>\n<li>\n<p>将<strong> CongWin</strong> 设为<strong> 1 个 MSS</strong> 大小；</p>\n</li>\n<li>\n<p>窗口以<strong>指数</strong>速度增大</p>\n</li>\n<li>\n<p>窗口增大到<strong>门限值</strong>之后，再以<strong>线性</strong>速度增大</p>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202410181421162.png\" alt=\"\"></p>\n<ol>\n<li>当 TCP 连接进行初始化时，将<strong>拥塞窗口置为 1</strong>。图中的窗口单位不使用字节而使用<strong>报文段</strong>。慢开始门限的初始值设置为 16 个报文段，即 ssthresh = 16。</li>\n<li>发送端的发送窗口不能超过<strong>拥塞窗口 cwnd</strong> 和<strong>接收端窗口 rwnd</strong> 中的<strong>最小值</strong>。我们假定接收端窗口足够大，因此现在发送窗口的数值等于拥塞窗口的数值。</li>\n<li>当拥塞窗口 cwnd 增长到<strong>慢开始门限值 ssthresh</strong> 时（即当 cwnd = 16 时），就改为执行<strong>拥塞避免算法</strong>，拥塞窗口按<strong>线性规律</strong>增长。</li>\n</ol>\n<h3 id=\"快速恢复\"><a class=\"markdownIt-Anchor\" href=\"#快速恢复\">#</a> 快速恢复</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202410181425437.png\" alt=\"\"></p>\n<ul>\n<li>\n<p>3 个冗余 ACK 进入快速重传后</p>\n</li>\n<li>\n<p>每收到一个<strong>冗余</strong> ACK：<strong>CongWin++</strong></p>\n</li>\n<li>\n<p>直至收到一个<strong>新的</strong> ACK：<strong>CongWin = 门限值</strong>，重新进入拥塞避免；因为已经收到了三个冗余 ACK，所以实际 cwnd = 门限值 + 3</p>\n</li>\n<li>\n<p>在进入<strong>快速恢复之后</strong>及重新<strong>进入拥塞避免之间</strong>，如果出现<strong>超时</strong>现象，直接<strong>按</strong>照前述<strong>超时事件</strong>进行<strong>处理</strong></p>\n</li>\n</ul>\n<p><strong>总结</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202410181430514.png\" alt=\"\"></p>\n<h2 id=\"tcp吞吐量\"><a class=\"markdownIt-Anchor\" href=\"#tcp吞吐量\">#</a> TCP 吞吐量</h2>\n<p>假定当丢包事件发生时，窗口大小为 W，此时吞吐量为 W/RTT</p>\n<p>丢包事件发生后，窗口大小减为 W/2, 吞吐量为 W/2RTT，因此平均吞吐量为: 0.75 W/RTT</p>\n<p>吞吐量是丢包率 (L) 的函数:<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mn>1.22</mn><mo>⋅</mo><mi>M</mi><mi>S</mi><mi>S</mi></mrow><mrow><mi>R</mi><mi>T</mi><mi>T</mi><msqrt><mi>L</mi></msqrt></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{1.22\\cdot MSS}{RTT\\sqrt{L}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.410331em;vertical-align:-0.538em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.872331em;\"><span style=\"top:-2.537397em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord sqrt mtight\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9322900000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mtight\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal mtight\">L</span></span></span><span style=\"top:-2.89229em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail mtight\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.10770999999999997em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">.</span><span class=\"mord mtight\">2</span><span class=\"mord mtight\">2</span><span class=\"mbin mtight\">⋅</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.538em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></p>\n<h2 id=\"并行tcp连接\"><a class=\"markdownIt-Anchor\" href=\"#并行tcp连接\">#</a> 并行 TCP 连接</h2>\n<p>考虑一段速率为 R 且支持 9 个在线客户 - 服务器应用的链路，每个应用使用一条 TCP 连接，如果一个新的应用加入进来</p>\n<ul>\n<li 10=\"\">如果新的应用也使用一条 TCP 连接，则每个应用得到差不多相同的传输速率\\frac{R}</li>\n<li>如果新的应用使用了 11 个并行的 TCP 连接，那这个应用就会不公平的分到超过<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>R</mi><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{R}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.217331em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.872331em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> 的带宽</li>\n</ul>\n",
            "tags": [
                "计网"
            ]
        },
        {
            "id": "http://www.luckycyyyy.top/2024/09/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/",
            "url": "http://www.luckycyyyy.top/2024/09/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/",
            "title": "计算机网络和因特网",
            "date_published": "2024-09-24T04:40:54.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"因特网的组成\"><a class=\"markdownIt-Anchor\" href=\"#因特网的组成\">#</a> 因特网的组成</h1>\n<p><strong>端系统</strong>（主机）：与因特网相连的计算机和其他设备称为端系统，端系统通过<strong>通信链路</strong>和<strong>分组交换机</strong>的网络连接到一起。</p>\n<p><strong>通信链路</strong>由不同的物理媒介组成。<strong>物理媒介</strong>包括同轴电缆、铜线、光纤、无线电频谱；链路的传输速率以 ** 比特 / 秒 (bit/s，或 bps)** 度量。</p>\n<p><strong>分组交换机</strong>常见的类型有<strong>路由器</strong>和<strong>链路层交换机</strong>，路由器常用于网络核心，链路交换机常用于接入网。</p>\n<p><strong>分组</strong>：发送端将数据分段，并为每段加上首部字节。</p>\n<blockquote>\n<p>类比：分组–卡车，分组交换机–交叉口，通信链路–公路，端系统–建筑物</p>\n</blockquote>\n<p><strong>因特网服务供应商 ISP</strong>：端系统通过 ISP 接入因特网，每个 ISP 自身就是一个由多台分组交换机和多段通信链路组成的网络。各 ISP 为端系统提供各种不同类型的网络接入，同时也为内容提供者提供因特网接入服务；因特网把各处的端系统互联，所以为端系统提供接入服务的 ISP 也必须互联。<strong>ISP 是因特网的硬件</strong>。</p>\n<p><strong>因特网标准</strong>：由<strong>因特网工程任务组（IETF）<strong>研发，IETF 的标准文档称为</strong>请求评论（RFC）</strong>，RFC 定义了 TCP、IP、HTTP 等协议。</p>\n<p><strong>协议</strong>：定义了在两个或多个通信实体之间交换的报文格式和顺序，以报文的发送 / 接收或其他事件所采取的操作。</p>\n<h1 id=\"网络边缘\"><a class=\"markdownIt-Anchor\" href=\"#网络边缘\">#</a> 网络边缘</h1>\n<h2 id=\"主机端系统\"><a class=\"markdownIt-Anchor\" href=\"#主机端系统\">#</a> 主机（端系统）</h2>\n<h2 id=\"接入网\"><a class=\"markdownIt-Anchor\" href=\"#接入网\">#</a> 接入网</h2>\n<blockquote>\n<p>将端系统物理连接到边缘路由器的网络</p>\n<p>相对骨干网络，接入网往往是传输速度的瓶颈</p>\n</blockquote>\n<p><strong>家庭接入网</strong></p>\n<ul>\n<li><strong>数字用户线（DSL）</strong>\n<ul>\n<li>使用 DSL 时用户的本地<strong>电话公司</strong>也是它的因特网服务供应商 (ISP)</li>\n<li>每个用户的<strong> DSL 调制解调器</strong>使用现有的电话线与位于电话公司的本地中心局中的 ** 数字用户线接入复用器（DSLAM）** 交换数据</li>\n<li>用户一侧：使用一个分频器把到达家庭的数据信号和电话信号分隔开来，并将数据信号转发给 DSL 调制解调器</li>\n<li>本地中心局中：DSLAM 把数据和电话信号分隔开</li>\n<li>不对称接入，上行和下行速率不同</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/PictureBed/master/img/202410051553011.jpg\" alt=\"\"></p>\n<ul>\n<li>\n<p><strong>电缆因特网接入–混合光纤同轴（HFC）系统</strong></p>\n<ul>\n<li>\n<p>因为该系统既应用了光纤也应用了同轴电缆，所以被称为混合光纤同轴系统</p>\n</li>\n<li>\n<p>利用有线电视公司现有的有线电视基础设施</p>\n</li>\n<li>\n<p>使用电缆调制解调器、电缆调制解调器端接系统（CMTS）</p>\n</li>\n<li>\n<p>不对称接入</p>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/PictureBed/master/img/202410051557255.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>光纤到户（FTTH）</strong></p>\n<ul>\n<li><strong>有源光纤网络（AON）</strong>，本质上是交换以太网</li>\n<li><strong>无源光纤网络（PON）</strong>\n<ul>\n<li>每个家庭有一个<strong>光纤网络端接器（ONT）</strong></li>\n<li>ONT 由专门的光纤连接到邻近的分配器，该分配器把一些家庭连接到一根共享光纤，该光纤再连接到本地电话和公司的中心局中的 ONT，该 ONT 提供光电信号的转换，经过本地电话公司路由器与因特网相连</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/PictureBed/master/img/202410051558362.jpg\" alt=\"\"></p>\n<ul>\n<li><strong>5G</strong>\n<ul>\n<li>采用波束成形级数，数据以无线方式从供应商的基站发送到家中的调制解调器，由一个无线路由器与该调制解调器相连</li>\n</ul>\n</li>\n</ul>\n<p><strong>企业接入</strong></p>\n<ul>\n<li><strong>以太网</strong>：使用双绞铜线与一台以太网交换机相连</li>\n<li><strong>WiFi</strong>：基于 IEEE 802.11 技术的无线 LAN 接入</li>\n</ul>\n<h2 id=\"物理媒介\"><a class=\"markdownIt-Anchor\" href=\"#物理媒介\">#</a> 物理媒介</h2>\n<p>分类：</p>\n<p><strong>导引型媒介</strong>：光缆、双绞铜线、同轴电缆</p>\n<ul>\n<li>双绞铜线：最便宜且最常用的导引型传输媒介，无屏蔽双绞线（UTP）常用在建筑物内的计算机网络中，即局域网中</li>\n<li>同轴电缆：被用作共享媒介</li>\n<li>光纤：长途导引型传输媒介，特别是跨海链路</li>\n</ul>\n<p><strong>非导引型媒介</strong>：在无线局域网、数字卫星频道中传播</p>\n<p>各网络接入技术使用的物理媒介：</p>\n<p><strong>HFC</strong>：光缆和同轴电缆</p>\n<p><strong>DSL、以太网</strong>：双绞铜线</p>\n<p><strong>移动接入网</strong>：无线电频谱</p>\n<h1 id=\"网络核心\"><a class=\"markdownIt-Anchor\" href=\"#网络核心\">#</a> 网络核心</h1>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411171144576.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411182101785.png\" alt=\"\"></p>\n<blockquote>\n<p>即由 互联 因特网端系统 的 <strong>分组交换机</strong>和<strong>链路</strong>构成的 <strong>网状网络</strong></p>\n</blockquote>\n<h2 id=\"分组交换\"><a class=\"markdownIt-Anchor\" href=\"#分组交换\">#</a> 分组交换</h2>\n<ul>\n<li>分组：将长报文划分成较小的数据块，固定长度的数据段。每个分组都通过通信链路和分组交换机传送</li>\n<li>存储转发传输：仅当路由器已经接收完该分组的所有比特后，它才能开始向出链路传输该分组</li>\n<li>排队时延和分组丢失</li>\n<li>转发表和路由选择协议：在分组的首部包含目的地的 IP 地址；每台路由器有一个转发表，用于将目的地址映射为输出链路，路由选择协议用于自动设置这些转发表</li>\n<li>资源不预留，不预先确定分组的传输路径</li>\n</ul>\n<h3 id=\"时延的计算\"><a class=\"markdownIt-Anchor\" href=\"#时延的计算\">#</a> 时延的计算</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411182032963.png\" alt=\"\"></p>\n<p>如果忽略传播时延：总时延<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mtext> </mtext><mo>∗</mo></mrow><annotation encoding=\"application/x-tex\">=(n+m-1)\\  *</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\"> </span><span class=\"mord\">∗</span></span></span></span> 1 个分组的传输时延</p>\n<h2 id=\"电路交换\"><a class=\"markdownIt-Anchor\" href=\"#电路交换\">#</a> 电路交换</h2>\n<ul>\n<li>\n<p>在端系统间通信会话期间预留了端系统间沿路径通信所需要的资源</p>\n</li>\n<li>\n<p>频分复用（FDM）、时分复用（TDM）</p>\n<ul>\n<li>FDM：在电话网络中频段的宽度通常为 4kHz，频段的宽度称为带宽。</li>\n<li>TDM：其时域被分割成帧，在每个帧中有 4 个时隙，<strong>一条电路的传输速率等于帧速率乘以一个时隙中的比特数量</strong>。eg：如果链路每秒传输 8000 个帧，每个时隙由 8 个比特组成，则每条电路的传输速率是 64kbps。</li>\n</ul>\n<p>例：从主机 A 到主机 B 发送一个 640 000bit 的文件需要多长时间？假如在该网络中所有链路使用具有 24 时隙的 TDM，比特速率为 1.536Mbps。同时假定在主机 A 开始传输文件之前，需要 500ms 创建一条端到端的电路，它需要多久发送文件？</p>\n<blockquote>\n<p>每条链路的传输速率：1.536Mbps / 24 = 64kbps</p>\n<p>文件传输时间：640kb / 64kbps = 10s</p>\n<p>总时间：10s + 0.5s = 10.5s</p>\n<p>注意：该传输时间与链路数量无关：端到端电路不管是通过 1 条链路还是 100 条链路，传输时间都是 10s</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"网络应用的通信模型\"><a class=\"markdownIt-Anchor\" href=\"#网络应用的通信模型\">#</a> 网络应用的通信模型</h1>\n<p><strong>客户 / 服务器模型（C/S）</strong></p>\n<ol>\n<li>客户：使用服务者</li>\n<li>服务器：提供服务者</li>\n</ol>\n<p><strong>对等模式（P2P）</strong></p>\n<p>所有主机同时承担服务器和客户机的双重身份</p>\n<p><strong>混合模式</strong></p>\n<h1 id=\"分组交换网\"><a class=\"markdownIt-Anchor\" href=\"#分组交换网\">#</a> 分组交换网</h1>\n<h2 id=\"分组交换网中的时延\"><a class=\"markdownIt-Anchor\" href=\"#分组交换网中的时延\">#</a> 分组交换网中的时延</h2>\n<ul>\n<li>节点处理时延</li>\n<li>排队时延</li>\n<li>传输时延：将所有分组的比特推向链路所需要的时间</li>\n<li>传播时延：传播速率接近光速可近似忽略</li>\n</ul>\n<h2 id=\"计算机网络中的吞吐量\"><a class=\"markdownIt-Anchor\" href=\"#计算机网络中的吞吐量\">#</a> 计算机网络中的吞吐量</h2>\n<p>瞬时吞吐量：从主机 A 到主机 B 发文件，主机 B 收到该文件的速率就是瞬时吞吐量</p>\n<p>瓶颈链路的传输速率：主机 B 收到 F bit 的文件，以速率 Rs 到达路由器，以速率 Rc 离开路由器，那么<strong>吞吐量是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>R</mi><mi>s</mi><mo separator=\"true\">,</mo><mi>R</mi><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">min(Rs,Rc)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span></span></span></span></strong>，传输文件的时间为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi mathvariant=\"normal\">/</mi><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>R</mi><mi>s</mi><mo separator=\"true\">,</mo><mi>R</mi><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F/min(Rs,Rc)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>吞吐量不仅取决于沿着路径的传输速率，而且取决于干扰流量</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/PictureBed/master/img/202410060854081.png\" alt=\"\"></p>\n<h1 id=\"协议层次及其服务模型\"><a class=\"markdownIt-Anchor\" href=\"#协议层次及其服务模型\">#</a> 协议层次及其服务模型</h1>\n<h2 id=\"因特网的协议栈\"><a class=\"markdownIt-Anchor\" href=\"#因特网的协议栈\">#</a> 因特网的协议栈</h2>\n<ul>\n<li>应用层</li>\n<li>运输层</li>\n<li>网络层</li>\n<li>链路层</li>\n<li>物理层</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411181902635.png\" alt=\"\"></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411182000235.png\" alt=\"\"></p>\n<h2 id=\"isoosi\"><a class=\"markdownIt-Anchor\" href=\"#isoosi\">#</a> ISO/OSI</h2>\n<ul>\n<li>应用层</li>\n<li><strong>表示层</strong> ：允许应用程序解释数据的含义，如加密、压缩、特定机器的数据描述方法</li>\n<li><strong>会话层</strong>：提供了数据交换的同步、定界、建立检查点和恢复的能力</li>\n<li>运输层</li>\n<li>网络层</li>\n<li>链路层</li>\n<li>物理层</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411181959357.png\" alt=\"\"></p>\n<h2 id=\"基本概念\"><a class=\"markdownIt-Anchor\" href=\"#基本概念\">#</a> 基本概念</h2>\n<p><strong>实体</strong>：实体是任何可以<strong>发送和接收</strong>信息的<strong>硬件和软件</strong>进程，通常是一个特定的软件模型</p>\n<p><strong>对等体</strong>：不同机器上包含<strong>对应层的实体</strong>称为对等体</p>\n<p><strong>协议</strong>：控制两个<strong>对等实体</strong>进行逻辑通信的规则的集合</p>\n<ul>\n<li>语法，即数据和控制信息的结构或<strong>格式</strong></li>\n<li>语义，即需要发现何种控制信息，完成何种动作以及如何应答，定义收发双方需要<strong>完成的操作</strong></li>\n<li>同步，即事件<strong>实现顺序</strong>的详细说明</li>\n</ul>\n<p><strong>服务</strong>：为保证上层对等体能够互相通信，<strong>下层向上层提供的功能</strong></p>\n<p 协议是”水平“的，服务是“垂直”的=\"\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"></span></span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/PictureBed/master/img/202410060908367.png\" alt=\"\"></p>\n<p><strong>服务原语</strong>：网络相邻层之间进行交互的时候需要交换的一些<strong>必要指令</strong></p>\n<p><strong>服务访问点（SAP）</strong>：同一系统中<strong>相邻层</strong>的实体进行<strong>交互的地方</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411181919274.png\" alt=\"\"></p>\n<p><strong>协议数据单元（PDU）</strong>：<strong>对等</strong>层次上 传送数据的单位</p>\n<p><strong>服务数据单元（SDU）</strong>：<strong>层与层</strong>之间交换数据的单位</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411181921896.png\" alt=\"\"></p>\n<p><strong>网络体系结构</strong>：层和协议的集合</p>\n<p><strong>协议栈</strong>：一个特定的系统所使用的一组协议</p>\n<p><img data-src=\"https://raw.githubusercontent.com/LUCKYCYYYY/WEb_img2/main/img/202411182037493.png\" alt=\" \"></p>\n",
            "tags": [
                "计网"
            ]
        }
    ]
}