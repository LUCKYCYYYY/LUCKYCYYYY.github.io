{
    "version": "https://jsonfeed.org/version/1",
    "title": "眨眼的小星玥 • All posts by \"贪心\" tag",
    "description": "小星玥，要努力学习呀！",
    "home_page_url": "http://www.luckycyyyy.top",
    "items": [
        {
            "id": "http://www.luckycyyyy.top/2025/03/12/algorithm/%E7%AE%97%E6%B3%95OJ/HUST_VJ/algorithm--Hust-ACM-Practice2/",
            "url": "http://www.luckycyyyy.top/2025/03/12/algorithm/%E7%AE%97%E6%B3%95OJ/HUST_VJ/algorithm--Hust-ACM-Practice2/",
            "title": "Hust_ACM_Practice2",
            "date_published": "2025-03-12T01:46:01.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"e-making-anti-palindromes\"><a class=\"markdownIt-Anchor\" href=\"#e-making-anti-palindromes\">#</a> E-Making Anti-Palindromes</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlZm9yY2VzLmNvbS9wcm9ibGVtc2V0L3Byb2JsZW0vMTgyMi9F\">Problem - 1822E - Codeforces</span></p>\n<p>判断能否通过交换实现 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">!</mo><mo>=</mo><mi>s</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[i] != s[n - i + 1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mclose\">!</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>：</p>\n<ul>\n<li>计算每一个字符出现的次数，如果某个字符出现次数超过一半，就不可能实现；否则就可以实现。</li>\n</ul>\n<p>如果可以实现，最少的交换次数是多少：</p>\n<ul>\n<li>计算出现 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo>=</mo><mi>s</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[i] == s[n - i + 1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 的总对数，以及对于每个字母出现一对的个数</li>\n<li>其中对于各个字母，出现对数最大的就是最后的最少交换次数</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n; cin &gt;&gt; n;</span><br><span class=\"line\">\tstring s; cin &gt;&gt; s;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n % <span class=\"number\">2</span>) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">cnt</span><span class=\"params\">(<span class=\"number\">26</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++) cnt[s[i] - <span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++) </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(cnt[i] * <span class=\"number\">2</span> &gt; n)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = s.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> pair = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">cnt_pair</span><span class=\"params\">(<span class=\"number\">26</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i &lt; j)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s[i] == s[j])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tpair++;</span><br><span class=\"line\">\t\t\tcnt_pair[s[i] - <span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ti++, j--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(cnt_pair[i] * <span class=\"number\">2</span> &gt; pair) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; cnt_pair[i] &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; (pair + <span class=\"number\">1</span>) / <span class=\"number\">2</span> &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tcin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>); cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> t;</span><br><span class=\"line\">\tcin &gt;&gt; t;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">solve</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"g-国王游戏\"><a class=\"markdownIt-Anchor\" href=\"#g-国王游戏\">#</a> G - 国王游戏</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDEwODA=\">国王游戏 - 洛谷</span></p>\n<p>高精 + 贪心</p>\n<p>出自 TainityAnle 的洛谷题解：</p>\n<p><img data-src=\"/imgs/algorithm--Hust-ACM-Practice2/image-20250313154942185.png\" alt=\"\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">bigint</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstring value;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"type\">const</span> bigint &amp; other)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(value.<span class=\"built_in\">length</span>() != other.value.<span class=\"built_in\">length</span>()) <span class=\"keyword\">return</span> value.<span class=\"built_in\">length</span>() &lt; other.value.<span class=\"built_in\">length</span>() ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value.<span class=\"built_in\">compare</span>(other.value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:\t</span><br><span class=\"line\">\t<span class=\"built_in\">bigint</span>(string s = <span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tvalue = s;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">bool</span> <span class=\"title\">smaller</span><span class=\"params\">(<span class=\"type\">const</span> bigint &amp;a, <span class=\"type\">const</span> bigint &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a.<span class=\"built_in\">cmp</span>(b) &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbigint <span class=\"keyword\">operator</span>+(<span class=\"type\">const</span> bigint&amp; other)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> i = value.<span class=\"built_in\">length</span>() - <span class=\"number\">1</span>, j = other.value.<span class=\"built_in\">length</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tstring result;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(i &gt;= <span class=\"number\">0</span> || j &gt;= <span class=\"number\">0</span> || carry &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> sum = carry;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">0</span>) \tsum += value[i--] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(j &gt;= <span class=\"number\">0</span>) sum += other.value[j--] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t\t\tresult.<span class=\"built_in\">push_back</span>(sum % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">\t\t\tcarry = sum / <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\t<span class=\"built_in\">reverse</span>(result.<span class=\"built_in\">begin</span>(), result.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t\tresult.<span class=\"built_in\">erase</span>(<span class=\"number\">0</span>, result.<span class=\"built_in\">find_first_not_of</span>(<span class=\"string\">&#x27;0&#x27;</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(result.<span class=\"built_in\">empty</span>()) <span class=\"keyword\">return</span> <span class=\"built_in\">bigint</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">bigint</span>(result); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbigint <span class=\"keyword\">operator</span>-(<span class=\"type\">const</span> bigint &amp; other)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> borrow = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tstring result;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> i = value.<span class=\"built_in\">length</span>() - <span class=\"number\">1</span>, j = other.value.<span class=\"built_in\">length</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(i &gt;= <span class=\"number\">0</span> || j &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> diff = borrow;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">0</span>) diff += value[i--] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(j &gt;= <span class=\"number\">0</span>) diff -= other.value[j--] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(diff &lt; <span class=\"number\">0</span>) </span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tdiff += <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\t\tborrow = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> borrow = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\tresult.<span class=\"built_in\">push_back</span>(diff % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">reverse</span>(result.<span class=\"built_in\">begin</span>(), result.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t\tresult.<span class=\"built_in\">erase</span>(<span class=\"number\">0</span>, result.<span class=\"built_in\">find_first_not_of</span>(<span class=\"string\">&#x27;0&#x27;</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(result.<span class=\"built_in\">empty</span>()) <span class=\"keyword\">return</span> <span class=\"built_in\">bigint</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">bigint</span>(result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbigint <span class=\"keyword\">operator</span>*(<span class=\"type\">const</span> bigint &amp; other)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"function\">string <span class=\"title\">result</span><span class=\"params\">(value.length() + other.value.length(), <span class=\"string\">&#x27;0&#x27;</span>)</span></span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = value.<span class=\"built_in\">length</span>() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> carry = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = other.value.<span class=\"built_in\">length</span>() - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> sum = carry + (result[i + j + <span class=\"number\">1</span>] - <span class=\"string\">&#x27;0&#x27;</span>) + (value[i] - <span class=\"string\">&#x27;0&#x27;</span>) * (other.value[j] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">\t\t\t\tresult[i + j + <span class=\"number\">1</span>] = sum % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t\t\t\tcarry = sum / <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tresult[i] += carry;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tresult.<span class=\"built_in\">erase</span>(<span class=\"number\">0</span>, result.<span class=\"built_in\">find_first_not_of</span>(<span class=\"string\">&#x27;0&#x27;</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(result.<span class=\"built_in\">empty</span>()) <span class=\"keyword\">return</span> <span class=\"built_in\">bigint</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">bigint</span>(result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbigint <span class=\"keyword\">operator</span>/(<span class=\"type\">const</span> bigint&amp; other)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(other.value == <span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"built_in\">runtime_error</span>(<span class=\"string\">&quot;Division by zero&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">cmp</span>(other) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">bigint</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstring result;</span><br><span class=\"line\">\t\t<span class=\"function\">bigint <span class=\"title\">temp</span><span class=\"params\">(<span class=\"string\">&quot;0&quot;</span>)</span></span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> digit: value)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttemp = temp * <span class=\"built_in\">bigint</span>(<span class=\"string\">&quot;10&quot;</span>) + <span class=\"built_in\">bigint</span>(<span class=\"built_in\">string</span>(<span class=\"number\">1</span>, digit));</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(temp.<span class=\"built_in\">cmp</span>(other) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttemp = temp - other;</span><br><span class=\"line\">\t\t\t\tcount ++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tresult.<span class=\"built_in\">push_back</span>(count + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tresult.<span class=\"built_in\">erase</span>(<span class=\"number\">0</span>, result.<span class=\"built_in\">find_first_not_of</span>(<span class=\"string\">&#x27;0&#x27;</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(result.<span class=\"built_in\">empty</span>()) <span class=\"keyword\">return</span> <span class=\"built_in\">bigint</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">bigint</span>(result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; os, <span class=\"type\">const</span> bigint&amp; num)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tos &lt;&lt; num.value;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> os;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; a, pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.first * a.second &lt; b.first * b.second;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tcin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>); cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> n; cin &gt;&gt; n;</span><br><span class=\"line\">\tn = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">\tvector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">v</span>(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; v[i].first &gt;&gt; v[i].second;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(v.<span class=\"built_in\">begin</span>() + <span class=\"number\">1</span>, v.<span class=\"built_in\">end</span>(), cmp);</span><br><span class=\"line\">\t<span class=\"comment\">//for(int i = 0; i &lt; n; i++) cout &lt;&lt;  v[i].first &lt;&lt; &quot; &quot; &lt;&lt;  v[i].second &lt;&lt;&#x27;\\n&#x27;;</span></span><br><span class=\"line\">\t<span class=\"function\">bigint <span class=\"title\">ans</span><span class=\"params\">(to_string(v[<span class=\"number\">0</span>].first))</span>, <span class=\"title\">res</span><span class=\"params\">(<span class=\"string\">&quot;0&quot;</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tbigint tmp = ans / <span class=\"built_in\">bigint</span>(<span class=\"built_in\">to_string</span>(v[i].second)); </span><br><span class=\"line\">\t\tans = ans * <span class=\"built_in\">bigint</span>(<span class=\"built_in\">to_string</span>(v[i].first));</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(bigint::<span class=\"built_in\">smaller</span>(res, tmp)) res = tmp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; res;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"h-字符串排序\"><a class=\"markdownIt-Anchor\" href=\"#h-字符串排序\">#</a> H - 字符串排序</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDg3MTk=\">P8719 字串排序 - 洛谷</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vc29sdXRpb24vUDg3MTk=\">字串排序 - 洛谷题解</span></p>\n<p><strong>题目描述</strong>：要求求一个逆序对个数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> 的字典序最小的最短的字符串</p>\n<p><strong>解题思路</strong>：</p>\n<p>第一步：求出满足字典序为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> 的最短的字符串的长度</p>\n<ol>\n<li>\n<p>对于一个字符串，如果它的长度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">len</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span></span></span></span> 小于等于 26，那么它能产生的最多逆序对的个数为 <code>len * (len - 1) / 2</code></p>\n</li>\n<li>\n<p>对于一个字符串，如果它的长度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">len</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span></span></span></span> 大于 26， 那么一定会有重复的字符串，因为要求字典序最小，应该让字典序小的出现次数多</p>\n<p>找规律可知：</p>\n<ul>\n<li>若原字符串是 <code>cbbaa</code> ，那么插入 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> 会使字符串逆序对最多</li>\n<li>若原字符串是 <code>ccbba</code> ，那么插入 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> 会使字符串逆序对最多</li>\n</ul>\n<p>即需要让不同字符的个数相差最小，这时逆序对最多。</p>\n</li>\n<li>\n<p>对于长度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">len</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span></span></span></span> 的字符串，计算逆序对个数的最大值：</p>\n<ul>\n<li>对于重复次数更多的字符<strong>出现的次数</strong>： <code>len / 26 + 1</code> ，对于每个字符产生的<strong>逆序对个数</strong>是： <code>len - (len / 26 + 1)</code> （去除自己的个数），重复次数更多的<strong>字符的个数</strong>： <code>len % 26</code></li>\n<li>对于重复次数少的字符<strong>出现的次数</strong>： <code>len / 26</code> ，对于每个字符产生的<strong>逆序对个数</strong>是： <code>len - (len / 26)</code> ，重复次数少的<strong>字符的个数</strong>： <code>26 - len % 26</code></li>\n</ul>\n<p><strong>总逆序对个数</strong>是： <code>int L= ((len - (len / 26 + 1)) * (len / 26 + 1) * (len % 26) + (len - (len / 26)) * (len / 26) * (26 - len % 26)) &gt;&gt; 1</code> ，记得最后要 <code> / 2</code>  因为所有的逆序对都算了两遍</p>\n</li>\n</ol>\n<p>第二步：往长度为 <code>L</code>  的字符串的填入字符</p>\n<p>一位一位地遍历，因为要求字典序最小，所以需要从小往大遍历，看是否能放。</p>\n<p>判断的<strong>依据</strong>是：如果这个节点前面的逆序对个数 + 加上这个节点后新产生的逆序对个数 + 这个节点之后能产生的最大的逆序对个数 &gt;= v，那么这个节点是满足条件的。（“这个节点之后能产生的最大的逆序对个数” 没弄太明白）</p>\n",
            "tags": [
                "algorithm",
                "贪心"
            ]
        },
        {
            "id": "http://www.luckycyyyy.top/2024/08/31/algorithm/%E6%9D%82%E6%9D%82%E7%9A%84%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/algorithm--%E8%B4%AA%E5%BF%83-%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/",
            "url": "http://www.luckycyyyy.top/2024/08/31/algorithm/%E6%9D%82%E6%9D%82%E7%9A%84%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/algorithm--%E8%B4%AA%E5%BF%83-%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/",
            "title": "贪心--区间问题",
            "date_published": "2024-08-31T01:23:18.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"区间选点\"><a class=\"markdownIt-Anchor\" href=\"#区间选点\">#</a> 区间选点</h1>\n<blockquote>\n<p>相当于问最少有多少重叠区间的集合，根据观察我们可以根据下一个区间左端点和上一个区间右端点的比较，判断是否有重叠，为了更好的比较就需要排序，那么就有两种解决方法：按右端点排序 / 按左端点排序</p>\n</blockquote>\n<p>按右端点排序：</p>\n<blockquote>\n<ol>\n<li>因为是按右端点排序的，所以在 <code>ed &gt;= e[i].l</code>  的情况下， <code>ed &lt;= e[i].r</code>  是一定的，所以不需要特殊判断</li>\n<li><code>ed = e[i].r</code>  需要放在判断条件的里面，因为这个公共点不在新扩展的那部分区域；如果放在判断条件外面，就相当于默认那段新展开的区域也是有选择的点的，但是那一段新展开的区域显然不是和前面的区间的公共段，所以那个选择的公共点不在新展开的区域</li>\n</ol>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edges</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"type\">const</span> edges&amp; W)<span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r &lt; W.r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;e[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; e[i].l &gt;&gt; e[i].r;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(e, e + n);</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">0</span>, ed = <span class=\"number\">-2e9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ed &lt; e[i].l) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res++;</span><br><span class=\"line\">            ed = e[i].r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; res;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>按左端点排序：</p>\n<blockquote>\n<ol>\n<li>在 <code>ed &gt;= e[i].l</code>  情况下，需要更新公共点所在区间</li>\n<li>在 <code>ed &lt; e[i].l</code>  情况下，证明当前区域和之前的区域没有重叠区间，集合数加 1，更新区间边界</li>\n</ol>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edges</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"type\">const</span> edges&amp; W)<span class=\"type\">const</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l &lt; W.l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;e[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; e[i].l &gt;&gt; e[i].r;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(e, e + n);</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">1</span>, ed = e[<span class=\"number\">0</span>].r;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ed &gt;= e[i].l)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ed = <span class=\"built_in\">min</span>(ed, e[i].r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res++;</span><br><span class=\"line\">            ed = e[i].r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; res;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"最大不相交区间的数量\"><a class=\"markdownIt-Anchor\" href=\"#最大不相交区间的数量\">#</a> 最大不相交区间的数量</h1>\n<blockquote>\n<ol>\n<li>按照前一题区间选点的方式，将所有区间分成几个集合，每个集合中的各个区间都有公共区域。</li>\n<li>若要选择不相交的区域，不相交的区域一定在不同的集合里，所以总集合数就是最大不相交的区域，即区间选点的数量</li>\n<li>和区间选点代码相同</li>\n</ol>\n</blockquote>\n<h1 id=\"区间分组\"><a class=\"markdownIt-Anchor\" href=\"#区间分组\">#</a> 区间分组</h1>\n<blockquote>\n<p>引入小根堆，对区间右端点进行操作比较，如果当前区间的左端点大于最小的区间右端点，可以直接加入到已有的组；否则，新开一个组。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edges</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"type\">const</span> edges&amp; W)<span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l &lt; W.l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;e[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>, vector&lt;<span class=\"type\">int</span>&gt;, greater&lt;<span class=\"type\">int</span>&gt;&gt; q;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; e[i].l &gt;&gt; e[i].r;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(e, e + n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q.<span class=\"built_in\">empty</span>() || q.<span class=\"built_in\">top</span>() &gt;= e[i].l)   q.<span class=\"built_in\">push</span>(e[i].r);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(e[i].r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; q.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"区间覆盖\"><a class=\"markdownIt-Anchor\" href=\"#区间覆盖\">#</a> 区间覆盖</h1>\n<blockquote>\n<ol>\n<li>\n<p>按照区间左端点进行排序，在包含 start 点的所有区间中找到右端点最大的区间</p>\n</li>\n<li>\n<p>判断条件</p>\n<ol>\n<li>\n<p>如果左端点小于 start，就将它的右端点和当前最大右端点进行比较</p>\n</li>\n<li>\n<p>得到的最大右端点如果仍小于 start，说明没有包含 start 的区间，break，res = -1</p>\n</li>\n<li>\n<p>得到的最大右端点如果大于 end，那么表示整个区间都被表示了，可以退出</p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>注意：</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{注意：}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord cjk_fallback\" style=\"color:red;\">注</span><span class=\"mord cjk_fallback\" style=\"color:red;\">意</span><span class=\"mord cjk_fallback\" style=\"color:red;\">：</span></span></span></span></span> 因为可能存在</p>\n<p>1\t5</p>\n<p>2</p>\n<p>-1 \t2</p>\n<p>2\t4</p>\n<p>这种情况，即待表示的区间右端点 5 大于目前拥有的区间的最大右端点，所以需要再大于 end 的情况下加一个判断，表示走到了结尾</p>\n</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edges</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"type\">const</span> edges&amp;W)<span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l &lt; W.l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;e[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n, s, t, res;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; s &gt;&gt; t;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; e[i].l &gt;&gt; e[i].r;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(e, e + n);</span><br><span class=\"line\">    <span class=\"type\">bool</span> success = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> j = i, st= <span class=\"number\">-2e9</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j &lt; n &amp;&amp; e[j].l &lt;= s)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            st = <span class=\"built_in\">max</span>(st, e[j].r);</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(st &lt; s) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(st &gt;= t) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            success = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        s = st;</span><br><span class=\"line\">        i = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!success) res = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    cout &lt;&lt; res;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "贪心"
            ]
        }
    ]
}